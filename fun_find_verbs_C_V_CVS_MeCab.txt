fun_find_verbs_C_V_CVS_MeCab<-function(material){#此处的material必须为自制函数fun_MeCab的输出（10列矩阵）
  library(stringr)
  if(1){
    fun_0<-function(x){
      return(which(x!=0))
    } #临时函数，输入为向量，输出其中非零元素的位置
    fun_1<-function(X, y){
      cn<-colnames(x)
      reurn(cn[y])
    } #输入X为矩阵（带列名），y为向量（其元素为正整数，且均小于等于X的列数）；输出y中元素对应的列名。该函数只向第一参数索取列名，无关其他。
  } # 最基础的几个自制函数
  x<-which(material[,2]=="動詞")
  if(length(x)!=0){
    objects_res<-material[x,]
    num_objects<-length(x)
    #生成用来存储结果的矩阵
    if(1){
      # Conjugates_Matrix<-matrix(0, nrow=num_objects, ncol=7)#活用形矩阵
      Conjugates_Matrix<-matrix(0, nrow=num_objects, ncol=9)#活用形矩阵
      # types<-c("未然形（口語体）", "未然形（文語体）", "連用形", "終止形", "連体形", "仮定形", "命令形")
      types<-c("未然形（口語体）",
               "未然形（文語体）",
               "連用形",
               "終止形",
               "連体形",
               "仮定形",
               "命令形",
               "基本形",
               "口語形")
      colnames(Conjugates_Matrix)<-types
      if(num_objects>1){
        rownames(Conjugates_Matrix)<-objects_res[, 8]
      }else{
        rownames(Conjugates_Matrix)<-objects_res[8]
      }
    }
    #填充<活用形>矩阵
    if(1){
      if(num_objects>1){
        Conjugates_Matrix[which(objects_res[,7]=="未然ヌ接続"), 1]<-1
        Conjugates_Matrix[which(str_detect(objects_res[,7], "^未然(?!.*ヌ接続).*$")), 2]<-1
        Conjugates_Matrix[which(str_detect(objects_res[,7], "^連用.+$")), 3]<-1
        if(1){
          basic<-which(objects_res[,7]=="基本形")#在由动词词素序列号构成的向量中的序列号
          basic_num<-x[basic]#在全体词素中的序列号
          series_end_form<-basic[sort(union(which(str_detect(material[basic_num+1, 2], "^(記号|助詞)$")), which(material[basic_num+1, 4]=="助動詞語幹")))]
          series_attributive<-setdiff(basic, series_end_form)
          Conjugates_Matrix[series_attributive, 4]<-1
          Conjugates_Matrix[series_end_form, 5]<-1
        }
        Conjugates_Matrix[series_attributive, 4]<-1
        Conjugates_Matrix[series_end_form, 5]<-1
        Conjugates_Matrix[which(objects_res[,7]=="仮定形"),6]<-1
        Conjugates_Matrix[which(str_detect(objects_res[,7], "^命令.+$")), 7]<-1
        Conjugates_Matrix[which(str_detect(objects_res[,7], ".+基本形")), 8]<-1
        Conjugates_Matrix[which(objects_res[,7]=="口語形"), 9]<-1
      }else{
        double_objects_res<-rbind(objects_res, objects_res)
        double_x<-rep(x, 2)
        double_Conjugates_Matrix<-rbind(Conjugates_Matrix, Conjugates_Matrix)
        double_Conjugates_Matrix[which(double_objects_res[,7]=="未然ヌ接続"), 1]<-1
        double_Conjugates_Matrix[which(str_detect(double_objects_res[,7], "^未然(?!.*ヌ接続).*$")), 2]<-1
        #double_Conjugates_Matrix[which(double_objects_res[,7]=="連用タ接続"), 3]<-1
        double_Conjugates_Matrix[which(str_detect(double_objects_res[, 7], "^連用.+$")), 3]<-1
        if(1){
          basic<-which(double_objects_res[,7]=="基本形")#在由动词词素序列号构成的向量中的序列号
          basic_num<-double_x[basic]#在全体词素中的序列号
          series_end_form<-basic[sort(union(which(str_detect(material[basic_num+1, 2], "^(記号|助詞)$")), which(material[basic_num+1, 4]=="助動詞語幹")))]
          series_attributive<-setdiff(basic, series_end_form)
        }
        double_Conjugates_Matrix[series_attributive, 4]<-1
        double_Conjugates_Matrix[series_end_form, 5]<-1
        double_Conjugates_Matrix[which(double_objects_res[,7]=="仮定形"),6]<-1
        double_Conjugates_Matrix[which(str_detect(double_objects_res[,7], "^命令.+$")), 7]<-1
        double_Conjugates_Matrix[which(double_objects_res[,7]=="文語基本形"), 8]<-1
        double_Conjugates_Matrix[which(double_objects_res[,7]=="口語形"), 9]<-1
        Conjugates_Matrix<-t(double_Conjugates_Matrix[1, ])
        rownames(Conjugates_Matrix)<-rownames(double_Conjugates_Matrix)[1]
      }
    }
    if(num_objects>1){
      基本形<-objects_res[, 8]
    }else{
      基本形<-objects_res[8]
    }
    活用形<-types[apply(Conjugates_Matrix, 1, fun_0)]
    # string
    # material[x[which(rowSums(Conjugates_Matrix)!=1)]+2,]
    匹配序列号<-x
    三阶粒度=data.frame(浅层标签="動詞",
                        中层标签=paste("動詞", 活用形, sep="_"),
                        深层标签=paste(基本形, 活用形, sep="_"))
    list(匹配序列号=匹配序列号, 三阶粒度=三阶粒度)
  }else{
    list(匹配序列号=NULL, 三阶粒度=NULL)
  }
}
