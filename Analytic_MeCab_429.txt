Analytic_MeCab_429<-function(input)
  {
  library(stringr)
  if(1){
    fun_InVec_adhere<-function(vec, sep=""){
      library(stringr)
      len<-length(vec)
      res<-vec[1]
      for(i in 2:len){
        if(vec[i]!="") res<-str_c(res, vec[i], sep=sep)
        else break
      }
      return(res)
    }
    fun_rough_merge<-function(X, position=2, anchor_label="名詞"){
      fun_temp<-function(x)length(unique(x))
      Summary<-rle(X[,position])
      len<-Summary$lengths
      val<-Summary$values
      end<-cumsum(len)
      start<-end-len+1
      matched<-which(val==anchor_label&len>=2)
      num_matched<-length(matched)
      if(num_matched>=1){
        res<-list()
        # find every Continuum which its 2nd lable is "anchor_label",
        # then store its row numbers in correspond element of res
        for(i in 1:num_matched) res[[i]]<-start[matched[i]]:end[matched[i]]
        # for each selected Continuum, compress it from up and down.
        tag_positions<-2:7
        surface_pronunciations<-c(1, 8:10)
        for(i in 1:num_matched){
          elements<-res[[i]]# Stored series number of rows stored in current Continnum.
          num_elements<-length(elements)# Length of current.
          #inconsistencies<-tag_positions[which(apply(X[elements, tag_positions], 2, fun_temp)!=1)]
          #if(length(inconsistencies)!=0){
          #  X[elements[1], inconsistencies]<-apply(X[elements, inconsistencies], 2, fun_InVec_adhere)
          #}
          X[elements[1], surface_pronunciations]<-apply(X[elements, surface_pronunciations], 2, fun_InVec_adhere)
          X[elements[-1], 1]<-""
        }
        return(X[-which(X[,1]==""),])
      }
      return(X)
    }
    fun_fusion_PrefixOrSuffix_and_Noun<-function(x, mode="M", target="Pre"){
      #----
      fun_Trivial_Prefix<-function(x, y){
        library(stringr)
        #本函数用来适切地将“接头辞”行和后接的“名词”行合并为1行
        #输入x,y为两条长度均为含15个元素的向量,且为处理后的Juman++形态素解析结果
        #x为“接头辞”行，y为后接的“名词”行
        Ore<-rbind(x, y)#rbind后的待处理矩阵（2行15列）
        Res<-rep("", 15)#最终输出的结果
        Simple_Combine<-c(1:3, 14, 15)#简单结合
        Keep_the_Latter<-c(4:11)#仅保留后者
        Padding_Combine<-13#中间插入自定义分隔符后结合
        Res[Simple_Combine]<-fun_glue(Ore[,Simple_Combine], direction=2, sep="")
        Res[Keep_the_Latter]<-Ore[2,Keep_the_Latter]
        Res[Padding_Combine]<-fun_glue(Ore[,Padding_Combine], direction=2, sep=" =|= ")%>%str_replace(" =\\|= $", "")
        #for Tricky One: 12
        if(1){
          Chinese_Characters<-Ore[,12]%>%str_extract_all(":.*/")%>%unlist()%>%str_sub(2,-2)%>%fun_InVec_adhere("")
          Hiragana<-Ore[,12]%>%str_extract_all("/.*$")%>%unlist()%>%str_sub(2,-1)%>%fun_InVec_adhere("")
          Res[12]<-c("代表表記:", Chinese_Characters, "/", Hiragana)%>%fun_InVec_adhere("")
        }
        return(Res)
      }
      fun_Trivial_Suffix<-function(x, y){
        library(stringr)
        #本函数用来适切地将“名词”行和后接的“接尾词”行合并为1行
        #输入x,y为两条长度均为含15个元素的向量,且为处理后的Juman++形态素解析结果
        #x为“名词”行，y为后接的“接尾词”行
        Ore<-rbind(x, y)#rbind后的待处理矩阵（2行15列）
        Res<-rep("", 15)#最终输出的结果
        Simple_Combine<-c(1:3, 14, 15)#简单结合
        Keep_the_Latter<-c(4:11)#仅保留前者
        Padding_Combine<-13#中间插入自定义分隔符后结合
        Res[Simple_Combine]<-fun_glue(Ore[,Simple_Combine], direction=2, sep="")
        Res[Keep_the_Latter]<-Ore[1,Keep_the_Latter]
        Res[Padding_Combine]<-Ore[,Padding_Combine]%>%fun_glue(direction=2, sep=" =|= ")%>%str_replace(" =\\|= $", "")
        #for Tricky One: 12
        if(1){
          Chinese_Characters<-Ore[,12]%>%str_extract_all(":.*/")%>%unlist()%>%str_sub(2,-2)%>%fun_InVec_adhere("")
          Hiragana<-Ore[,12]%>%str_extract_all("/.*$")%>%unlist()%>%str_sub(2,-1)%>%fun_InVec_adhere("")
          #Res[12]<-fun_InVec_adhere(vec=c("代表表記:", Chinese_Characters, "/", Hiragana), sep="")
          Res[12]<-c("代表表記:", Chinese_Characters, "/", Hiragana)%>%fun_InVec_adhere("")
        }
        return(Res)
      }
      #----
      #x是已经过名词合并的MeCab或Juman++的形态素解析结果；参数mode用来指定输入的形态素结果是来自MeCab或是Juman++。
      #参数target用来指定和“名词”行合并的是“接头辞”还是“接尾辞”（前者为"Pre"，后者为"Suf"）
      if(target=="Pre"){
        if(mode=="M"){
          a<-which(x[,2]=="接頭詞")#被判定为“接头辞”的形态素的序列号
          Prefix_lines<-a[which(x[a+1,2]=="名詞")]#“接头辞”形态素中，后接“名词”形态素的序列号
          Noun_lines<-Prefix_lines+1#接头词后的名词行编号
          len<-length(Prefix_lines)#匹配成功的个数
          if(len!=0){
            for(i in 1:len){
              Current_PrefixLine<-x[Prefix_lines[i], ]#现在的“接头辞”行
              Current_NounLine<-x[Noun_lines[i], ]#现在的“名词”行
              Fused<-paste0(Current_PrefixLine, Current_NounLine)#把（当前）“接头辞”行与后续的“名词”行的对应元素粘起来
              Fused[c(2,3)]<-Current_NounLine[c(2,3)]#将其中第2元素（品词大分类），第3元素（品词小分类）替换为“名词”行的对应元素
              x[Noun_lines[i],]<-Fused#用混合好了的行替换接头词行后的名词行
            }
            new_x<-x[-Prefix_lines, ]#删除所有接头词行
          }else{
            new_x<-x
          }
        }else
          if(mode=="J"){
            b<-which(x[,4]=="接頭辞")#定位接头辞的行编号
            Prefix_lines<-b[which(x[b+1,4]=="名詞")]#过滤，仅保留后接名词的接头辞行的编号
            Noun_lines<-Prefix_lines+1
            len<-length(Prefix_lines)
            if(len!=0){
              for(i in 1:len){
                Current_PrefixLine<-x[Prefix_lines[i],]
                Current_NounLine<-x[Noun_lines[i],]
                Fused<-fun_Trivial_Prefix(Current_PrefixLine, Current_NounLine)
                x[Noun_lines[i],]<-Fused#用处理好的行替换当前的名词行
              }
              new_x<-x[-Prefix_lines,]#删去接头辞行
            }else{
              new_x<-x
            }
          }else{
            cat("mode只能为M或J。\n")
          }
        return(new_x)
      }
      if(target=="Suf"){
        if(mode=="J"){
          b<-which(x[,4]=="接尾辞")#定位接尾辞行
          Suffix_lines<-b[which(x[b-1,4]=="名詞")]#过滤，仅保留前接名词的接尾辞的行编号
          Noun_lines<-Suffix_lines-1
          len<-length(Suffix_lines)
          if(len!=0){
            for(i in 1:len){
              Current_NounLine<-x[Noun_lines[i],]
              Current_SuffixLine<-x[Suffix_lines[i],]
              Fused<-fun_Trivial_Suffix(Current_NounLine, Current_SuffixLine)
              x[Noun_lines[i],]<-Fused
            }
            new_x<-x[-Suffix_lines,]
          }else{
            new_x<-x
          }
        }else{
          cat("在target为“Suf”的情况下，mode只能为J。\n")
        }
        return(new_x)
      }
    }
    Call_MeCab<-function(input){
      #input<-Rebuilt_Parts[i]
      pseudo_input<-paste0("！", input)
      #pseudo_input
      command_M<-paste("echo", pseudo_input, "| mecab -b 5242880")
      res_M<-system(command_M, intern=TRUE)%>%str_subset("^(?!EOS)")%>%str_replace_all("\\t",",")%>%str_split_fixed(pattern=",",10)
      res_M<-res_M%>%fun_rough_merge()
      res_M<-res_M[-1,]
    }
  }
  input<-chartr(old="&()", new="＆（）", input)
  Punctuation_Marks<-input%>%str_match_all("、|。")%>%unlist()
  Non_Punctuation_Marks<-input%>%str_split("、|。")%>%unlist()%>%head(-1)
  Rebuilt_Parts<-fun_glue(cbind(Non_Punctuation_Marks, Punctuation_Marks), direction=1, sep="")
  len_sentences<-length(Non_Punctuation_Marks)
  Warehouse<-list()
  for(i in 1:len_sentences) Warehouse[[i]]<-Rebuilt_Parts[i]%>%Call_MeCab()
  Final_Result<-Warehouse[[1]]
  if(len_sentences>=2){
    for(i in 2:len_sentences) Final_Result<-rbind(Final_Result, Warehouse[[i]])
  }
  Final_Result<-fun_fusion_PrefixOrSuffix_and_Noun(Final_Result)
  Final_Result<-rbind(Final_Result, matrix("", nrow=3, ncol=10))
  #对于表停顿时间长度的标点统一为“、”或“。”，对于表引用的标点一律删除。
  if(1){
    #convert quasi-commas and quasi-periods to commas and periods
    quasi_commas<-which(str_detect(Final_Result[,1], "^(・|，|ーー|ー|,)$"))
    quasi_periods<-which(str_detect(Final_Result[,1], "^(．|\\.|…|……|…。|……。|？|！|!)$"))
    Final_Result[quasi_commas, 1]<-"、"
    Final_Result[quasi_periods,1]<-"。"
    #remove quotation marks
    quotation_marks<-which(str_detect(Final_Result[,1], "^(「|」|『|』|（|）|(|)|[|]|【|】|［|］|〈|〉|〔|〕|｛|｝|“|”|\"|‘|’|\')$"))
    Final_Result<-Final_Result[-quotation_marks,]
  }
  #厘出“形容動詞”
  if(1){
    形容動詞位置<-which(Final_Result[, 3]=="形容動詞語幹")
    Final_Result[形容動詞位置, 2]<-"形容動詞"
    Final_Result[形容動詞位置, 3]<-"語幹"
  }
  Final_Result<-fun_rough_merge(Final_Result)
  return(Final_Result)
}
