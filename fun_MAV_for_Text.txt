fun_MAV_for_Text<-function(x){
  library(stringr)
  if(1){
    fun_limit<-function(x, l){
      #x为长度>=2的向量
      #l为上限，等于net_J_Res或net_M_Res的长度
      #若x中存在大于l的元素，输出将其剔除后的x‘向量
      #若不存在大于l的元素，将x原样输出
      if(any(x>l)){
        pos<-which(x>l)
        x<-x[-pos]
      }
      return(x)
    }
    fun_remove_zero<-function(x){
      if(any(x==0)&any(x!=0)){
        pos<-which(x==0)
        x<-x[-pos]
      }
      return(x)
    }
    fun_InVec_adhere<-function(vec, sep=""){
      library(stringr)
      len<-length(vec)
      if(len>=2){
        res<-vec[1]
        for(i in 2:len){
          if(vec[i]!=""){
            res<-str_c(res, vec[i], sep=sep)
          }else{
            break
          }
        }
      }else{
        res<-vec
      }
      return(res)
    }##输入一条各元素为字符串的向量，将它们按顺序粘起来之后输出。
  } # 自作関数
  #若为1，⇨｜⇦(从左右向中间压缩);否则，⇧ー⇩（从上下向中间压缩）
  #前期准备
  if(1){
    #此处读取文本，并进行形态素解析（先Juman++，后MeCab）
    if(str_detect(x, "可(き|からず|からざる|からぬ|く|し)")){
        x<-str_replace_all(x, "可き", "べき")
        x<-str_replace_all(x, "可からず", "べからず")
        x<-str_replace_all(x, "可からざる", "べからざる")
        x<-str_replace_all(x, "可からぬ", "べからぬ")
        x<-str_replace_all(x, "可く", "べく")
      }#对于“べき”一族提前就行替换。
    if(1){
      front_padding_M<-matrix("", 2, 10); front_padding_J<-matrix("", 2, 16) # front_padding
      rear_padding_M<-matrix("", 3, 10); rear_padding_J<-rep("", 16) # rear_padding
      Mixture<-fun_ReadIn(x=x); net_J_Res<-Mixture[[1]]; net_M_Res<-Mixture[[2]]$Final_Result; net_M_Res[, 1]<-net_M_Res[, 1]%>%str_replace_all("_", ""); mn<-nrow(net_M_Res); jn<-nrow(net_J_Res)
      M_Res<-rbind(net_M_Res, rear_padding_M); J_Res<-rbind(net_J_Res, rear_padding_J); extended_M_Res<-rbind(front_padding_M, M_Res); extended_J_Res<-rbind(front_padding_J, J_Res)
    }#准备M_Res和J_Res
    if(1){
      Full_Set<-c("未然形", "連用形", "終止形", "連体形", "仮定形", "命令形")#完整的6项活用形
      Colloquial_Style_Basic_Forms<-c("せる/らせる", "れる/られる", "ない", "ぬ", "う/よう",
                                      "まい", "たい", "たがる", "た/だ", "ようだ",
                                      "らしい", "ます", "だ", "です", "そうだ（様態）",
                                      "そうだ（伝聞）")#16个
      Literary_Style_Basic_Forms<-c("しめる", "む", "き", "けり", "つ",
                                    "ぬ", "たり（完了）", "たし", "べし", "まじ",
                                    "なり", "たり（断定）", "ごとし")#13个
      #口语体助动词的活用种类一览
      Colloquial_Style_Conjugation<-c(Full_Set,# I_せる/らせる
                                      Full_Set,# II_れる/られる
                                      Full_Set[-6],# III_ない
                                      Full_Set[2:5],# IV_ぬ
                                      Full_Set[3:4],# V_う/よう
                                      Full_Set[3:4],# VI_まい
                                      c(Full_Set[-6], "連用ゴザイ接続"),# VII_たい
                                      Full_Set[-6],# VII_たがる
                                      Full_Set[-c(1, 6)],# VIII_た/だ
                                      Full_Set[-6],# IX_ようだ
                                      c(Full_Set[2:5], "文語未然形", "文語連体形"),# X_らしい
                                      c(Full_Set, "古い終止形・連体形"),# XI_ます
                                      c(Full_Set[-6]),# XII_だ
                                      c(Full_Set[1:4]),# XIII_です
                                      c(Full_Set[1:5], "語幹"),# XIV_そうだ（様態）
                                      c(Full_Set[1:4], "語幹"))# XV_そうだ（伝聞）
      #文语体助动词的活用种类一览
      Literary_Style_Conjugation<-c(Full_Set,# 1_しめる
                                    Full_Set[3:4],# 2_む
                                    Full_Set[3:4],# 3_き
                                    Full_Set[3],# 4_けり
                                    Full_Set[3],# 5_つ
                                    Full_Set[3],# 6_ぬ
                                    Full_Set,# 7_たり（完了）
                                    Full_Set[3],# 8_たし
                                    Full_Set[1:4],# 9_べし
                                    Full_Set[3:4],# 10_まじ
                                    Full_Set[-c(2, 6)],# 11_なり
                                    Full_Set,# 12_たり（断定）
                                    Full_Set[2:4])# 13_ごとし
    }#为最终结果（矩阵）准备列名
    #为本函数（fun_Matching_Auxiliary_Verb_compact）准备最终输出。具体形式为1个list对象，含2个元素：
    #（1）助动词词素在Res_M矩阵中的行编号
    #（2）拥有3列的矩阵，行数为输入字符串中被判定为“助动词”的词素的总数（包括映射自J_Res的）
    # [第1列：“助动词”标签]
    # [第2列：“助动词”标签_助动词基本形]
    # [第3列：助动词基本形_助动词活用形]
    res2compact<-list(sn=NULL, detail=NULL)#sn为series numbers的首字母缩写；detail就不用解释了
  }
  #选取实际使用部分，拼接。
  if(1){
    ##口語体
    if(1){
      # I_せる/らせる
      Pots_C_I_J<-list(0, 0, 0, 0, 0, 0)#对象Pots用来收纳匹配到的词素的行编号。
      if(0){
        Matched_Morphemes_Serial_Numbers<-which(str_detect(J_Res[, 3], "^せる|^させる"))
        Matched_Morphemes_Serial_Numbers<-fun_limit(Matched_Morphemes_Serial_Numbers, jn)
        if(length(Matched_Morphemes_Serial_Numbers)!=0){
          Pots_C_I_J[[1]]<-Matched_Morphemes_Serial_Numbers[which(J_Res[Matched_Morphemes_Serial_Numbers, 10]=="未然形")]
          Pots_C_I_J[[2]]<-Matched_Morphemes_Serial_Numbers[which(J_Res[Matched_Morphemes_Serial_Numbers, 10]=="基本連用形"|which(J_Res[Matched_Morphemes_Serial_Numbers, 10]=="タ形"))]
          Pots_C_I_J[[3]]<-Matched_Morphemes_Serial_Numbers[which(J_Res[Matched_Morphemes_Serial_Numbers, 10]=="基本形"&str_detect(J_Res[Matched_Morphemes_Serial_Numbers+1, 6], "句点|読点|終助詞"))]
          Pots_C_I_J[[4]]<-Matched_Morphemes_Serial_Numbers[which(J_Res[Matched_Morphemes_Serial_Numbers+1,4]=="名詞")]
          Pots_C_I_J[[5]]<-Matched_Morphemes_Serial_Numbers[which(J_Res[Matched_Morphemes_Serial_Numbers, 10]=="基本条件形")]
          Pots_C_I_J[[6]]<-Matched_Morphemes_Serial_Numbers[which(J_Res[Matched_Morphemes_Serial_Numbers, 10]=="命令形")]
          rm(Matched_Morphemes_Serial_Numbers)
        }
      }
      # II_れる/られる
      Pots_C_II_J<-list(0, 0, 0, 0, 0, 0)
      if(0){
        Matched_Morphemes_Serial_Numbers<-which(str_detect(J_Res[, 3], "^れる|^られる"))
        Matched_Morphemes_Serial_Numbers<-fun_limit(Matched_Morphemes_Serial_Numbers, jn)
        if(length(Matched_Morphemes_Serial_Numbers)!=0){
          Pots_C_II_J[[1]]<-Matched_Morphemes_Serial_Numbers[which(J_Res[Matched_Morphemes_Serial_Numbers, 10]=="未然形")]
          Pots_C_II_J[[3]]<-Matched_Morphemes_Serial_Numbers[which(J_Res[Matched_Morphemes_Serial_Numbers, 10]=="基本形"&str_detect(J_Res[Matched_Morphemes_Serial_Numbers+1, 6], "句点|読点|終助詞"))]
          Pots_C_II_J[[4]]<-Matched_Morphemes_Serial_Numbers[which(J_Res[Matched_Morphemes_Serial_Numbers, 10]=="基本形"&str_detect(J_Res[Matched_Morphemes_Serial_Numbers+1, 6], "^(?!.*(句点|読点|終助詞)).*$"))]
          Pots_C_II_J[[5]]<-Matched_Morphemes_Serial_Numbers[which(J_Res[Matched_Morphemes_Serial_Numbers, 10]=="基本条件形")]
          Pots_C_II_J[[6]]<-Matched_Morphemes_Serial_Numbers[which(str_detect(J_Res[Matched_Morphemes_Serial_Numbers, 10], "命令形"))]
          Pots_C_II_J[[2]]<-setdiff(Matched_Morphemes_Serial_Numbers, c(Pots_C_II_J[[1]], Pots_C_II_J[[3]], Pots_C_II_J[[4]], Pots_C_II_J[[5]], Pots_C_II_J[[6]]))
          rm(Matched_Morphemes_Serial_Numbers)
        }
      }
      # III_ない
      Pots_C_III_J<-list(0, 0, 0, 0, 0)
      if(0){
        Matched_Morphemes_Serial_Numbers<-which(J_Res[, 3]=="ない"&J_Res[, 4]=="接尾辞")
        Matched_Morphemes_Serial_Numbers<-fun_limit(Matched_Morphemes_Serial_Numbers, jn)
        ###"及ぼす"无法被Jumanpp识别为一个动词
        if(length(Matched_Morphemes_Serial_Numbers)!=0){
          Pots_C_III_J[[1]]<-Matched_Morphemes_Serial_Numbers[which(str_detect(J_Res[Matched_Morphemes_Serial_Numbers, 2], "なかろ"))]
          Pots_C_III_J[[2]]<-Matched_Morphemes_Serial_Numbers[which(str_detect(J_Res[Matched_Morphemes_Serial_Numbers, 2], "なかっ|なく"))]
          Pots_C_III_J[[3]]<-Matched_Morphemes_Serial_Numbers[which(J_Res[Matched_Morphemes_Serial_Numbers, 10]=="基本形"&str_detect(J_Res[Matched_Morphemes_Serial_Numbers+1, 4], "助|特殊"))]
          Pots_C_III_J[[4]]<-Matched_Morphemes_Serial_Numbers[which(J_Res[Matched_Morphemes_Serial_Numbers, 10]=="基本形"&J_Res[Matched_Morphemes_Serial_Numbers+1, 4]=="名詞")]
          Pots_C_III_J[[5]]<-Matched_Morphemes_Serial_Numbers[which(str_detect(J_Res[Matched_Morphemes_Serial_Numbers, 10], "条件形"))]
          rm(Matched_Morphemes_Serial_Numbers)
        }
      }
      # IV_ぬ
      if(1){
        Matched_Morphemes_Serial_Numbers<-which(M_Res[, 8]=="ぬ" & M_Res[, 2]=="助動詞")
        Matched_Morphemes_Serial_Numbers<-fun_limit(Matched_Morphemes_Serial_Numbers, mn)
        Pots_C_IV_M<-list(0, 0, 0, 0)
        nitakuitsu<-F
        if(length(Matched_Morphemes_Serial_Numbers)!=0){
          Pots_C_IV_M[[1]]<-Matched_Morphemes_Serial_Numbers[which(M_Res[Matched_Morphemes_Serial_Numbers, 1]=="ず")]
          Pots_C_IV_M[[2]]<-Matched_Morphemes_Serial_Numbers[which(M_Res[Matched_Morphemes_Serial_Numbers, 7]=="基本形" & str_detect(M_Res[Matched_Morphemes_Serial_Numbers+1, 2], "助詞|記号"))]
          if(length(Pots_C_IV_M[[2]])!=0){nitakuitsu<-T;nitakuitsu_num<-Pots_C_IV_M[[2]]}
          Pots_C_IV_M[[3]]<-Matched_Morphemes_Serial_Numbers[which(str_detect(M_Res[Matched_Morphemes_Serial_Numbers, 7], "基本形") & M_Res[Matched_Morphemes_Serial_Numbers+1, 2]=="名詞")]
          Pots_C_IV_M[[4]]<-Matched_Morphemes_Serial_Numbers[which(M_Res[Matched_Morphemes_Serial_Numbers, 7]=="仮定形")]
          rm(Matched_Morphemes_Serial_Numbers)
        }
        Pots_C_IV_M[[3]]<-sort(unique(c(Pots_C_IV_M[[3]], which(str_detect(net_M_Res[, 1], "^.*らぬ$")))))
      }
      # V_う/よう
      if(1){
        Matched_Morphemes_Serial_Numbers<-sort(c(which(J_Res[, 10]=="意志形"&(J_Res[, 4]=="動詞"|J_Res[, 6]=="動詞性接尾辞")), which(str_detect(J_Res[, 2], "^.*う$")&J_Res[, 4]=="助動詞"|(J_Res[, 4]=="形容詞"&str_detect(J_Res[, 10], "基本推量形")))))
        Matched_Morphemes_Serial_Numbers<-fun_limit(Matched_Morphemes_Serial_Numbers, jn)
        Pots_C_V_J<-list(0, 0)
        if(length(Matched_Morphemes_Serial_Numbers)!=0){
          Pots_C_V_J[[2]]<-Matched_Morphemes_Serial_Numbers[which(str_detect(J_Res[Matched_Morphemes_Serial_Numbers+1, 6], "名詞"))]
          Pots_C_V_J[[1]]<-setdiff(Matched_Morphemes_Serial_Numbers, Pots_C_V_J[[2]])
          rm(Matched_Morphemes_Serial_Numbers)
        }
      }
      # VI_まい
      if(1){
        Matched_Morphemes_Serial_Numbers<-which(J_Res[, 3]=="まい"&J_Res[, 4]=="助動詞")
        Matched_Morphemes_Serial_Numbers<-fun_limit(Matched_Morphemes_Serial_Numbers, jn)
        Pots_C_VI_J<-list(0, 0)
        if(length(Matched_Morphemes_Serial_Numbers)!=0){
          Pots_C_VI_J[[2]]<-Matched_Morphemes_Serial_Numbers[which(str_detect(J_Res[Matched_Morphemes_Serial_Numbers+1, 6], "名詞"))]
          Pots_C_VI_J[[1]]<-setdiff(Matched_Morphemes_Serial_Numbers, Pots_C_VI_J[[2]])
          rm(Matched_Morphemes_Serial_Numbers)
        }
      }
      # VII_たい, VII_たがる
      if(1){
        #一些准备工作
        if(1){
          #たがる
          a<-which(M_Res[, 2]=="動詞"&M_Res[, 7]=="連用形")#可以后接“たがる”的所有动词的连用形活用
          a<-fun_limit(a, mn)
          A<-paste0(M_Res[(a+1), 1], M_Res[(a+2), 1], M_Res[(a+3), 1])#粘连锚坐标之后的三个形态素
          Matched_Within_A<-which(str_detect(A, "^たが.*$"))#查是否有匹配"たがる"的活用
          Need_tobe_Sought_TaGaRu<-A[Matched_Within_A]#之后匹配“たがる”的各活用时，需要查找的字符串向量
          TaGaRu<-a[Matched_Within_A]+1#分解匹配成功的字符串，确认其中首个形态素在M_Res中的序列号
          #たい
          temp_Tai<-which(M_Res[, 2]=="助動詞"&M_Res[, 8]=="たい")
          temp_Tai<-fun_limit(temp_Tai, mn)
          Tai<-sort(setdiff(temp_Tai, TaGaRu))
        }
        #“たい”的活用
        Pots_C_VII_M_Tai<-list(0, 0, 0, 0, 0, 0)
        if(length(Tai)!=0){
          Pots_C_VII_M_Tai[[1]]<-Tai[which(M_Res[Tai, 9]=="タカロ")]
          Pots_C_VII_M_Tai[[2]]<-Tai[which(str_detect(M_Res[Tai, 7], "連用テ接続|連用タ接続"))]
          Pots_C_VII_M_Tai[[3]]<-Tai[which(M_Res[Tai, 7]=="基本形" & M_Res[Tai+1, 2]!="名詞")]
          Pots_C_VII_M_Tai[[4]]<-Tai[which(M_Res[Tai, 7]=="基本形" & M_Res[Tai+1, 2]=="名詞")]
          Pots_C_VII_M_Tai[[5]]<-Tai[which(M_Res[Tai, 7]=="仮定形")]
          Pots_C_VII_M_Tai[[6]]<-Tai[which(M_Res[Tai, 7]=="連用ゴザイ接続")]
        }
        #“たがる”的活用
        Pots_C_VII_M_TaGaRu<-list(0, 0, 0, 0, 0)
        if(length(TaGaRu)!=0){
          Pots_C_VII_M_TaGaRu[[1]]<-TaGaRu[which(str_detect(Need_tobe_Sought_TaGaRu, "たがら|たがろ"))]
          Pots_C_VII_M_TaGaRu[[2]]<-TaGaRu[which(str_detect(Need_tobe_Sought_TaGaRu, "たがり|たがっ"))]
          Pots_C_VII_M_TaGaRu[[3]]<-TaGaRu[which(str_detect(Need_tobe_Sought_TaGaRu, "たがる")&M_Res[TaGaRu+2, 2]!="名詞")]
          Pots_C_VII_M_TaGaRu[[4]]<-TaGaRu[which(str_detect(Need_tobe_Sought_TaGaRu, "たがる")&M_Res[TaGaRu+2, 2]=="名詞")]
          Pots_C_VII_M_TaGaRu[[5]]<-TaGaRu[which(str_detect(Need_tobe_Sought_TaGaRu, "たがれ"))]
        }
      }
      # VIII_た/だ
      Pots_C_VIII_J<-list(0, 0, 0, 0)
      if(0){
        ## 计算终止形与连体形的频数
        TaDa<-which(str_detect(J_Res[, 10], "タ形"))
        TaDa<-fun_limit(TaDa, jn)
        len_TaDa<-length(TaDa)
        TaDa_End_Form<-length(TaDa[which(J_Res[TaDa+1, 4]!="名詞")])
        TaDa_Attributive_Form<-len_TaDa-TaDa_End_Form
        Pots_C_VIII_J[[1]]<-which(str_detect(J_Res[, 10], "タ系推量形|タ系省略推量形"))%>%fun_limit(jn)
        Pots_C_VIII_J[[2]]<-TaDa[which(J_Res[TaDa+1, 4]!="名詞")]
        Pots_C_VIII_J[[3]]<-setdiff(TaDa, Pots_C_VIII_J[[2]])
        Pots_C_VIII_J[[4]]<-which(J_Res[, 10]=="タ系条件形")%>%fun_limit(jn)
        rm(list=c("TaDa", "len_TaDa", "TaDa_End_Form", "TaDa_Attributive_Form"))
      }
      # IX_ようだ
      if(1){
        ##----
        # 未然形：ようだろ                 a5, a8, a11
        # 連用形：ようだっ、ようで、ように a2, a6, a7, a9, a10, a12
        # 終止形：ようだ                   a1, a4_1
        # 連体形：ような                   a3
        # 仮定形：ようなら                 a4_2
        ##----
        Pots_C_IX_J<-list(0, 0, 0, 0, 0)
        Matched_Morphemes_Serial_Numbers<-which(str_detect(J_Res[, 3], "よう"))%>%fun_limit(jn)
        if(length(Matched_Morphemes_Serial_Numbers)!=0){
          Matched_Morphemes_Serial_Numbers_1<-which(J_Res[, 3]=="ようだ")
          Matched_Morphemes_Serial_Numbers_2<-Matched_Morphemes_Serial_Numbers[which(J_Res[Matched_Morphemes_Serial_Numbers, 10]=="")]
          #先对Matched_Morphemes_Serial_Numbers_1进行分解
          if(1){
            a1<-Matched_Morphemes_Serial_Numbers_1[which(J_Res[Matched_Morphemes_Serial_Numbers_1, 10]=="基本形")]#;fun_returning(x=a1)# “ようだ”
            a2<-Matched_Morphemes_Serial_Numbers_1[which(J_Res[Matched_Morphemes_Serial_Numbers_1, 10]=="ダ列基本連用形")]#;fun_returning(a2)# “ように”
            a3<-Matched_Morphemes_Serial_Numbers_1[which(J_Res[Matched_Morphemes_Serial_Numbers_1, 10]=="ダ列基本連体形")]#;fun_returning(a3)# “ような”
            a4<-Matched_Morphemes_Serial_Numbers_1[which(J_Res[Matched_Morphemes_Serial_Numbers_1, 10]=="語幹")]#;fun_returning(a4)
            a4_1<-a4[which(J_Res[a4+1, 1]!="なら")]#;fun_returning(a4_1)# 相当于“ようだ”的终止形
            a4_2<-a4[which(J_Res[a4+1, 1]=="なら")]#;fun_returning(a4_2)# “ようだ”的仮定形（的一部分）
            a5<-Matched_Morphemes_Serial_Numbers_1[which(J_Res[Matched_Morphemes_Serial_Numbers_1, 10]=="ダ列基本推量形")]#;fun_returning(a5)# “ようだろう”
            a6<-Matched_Morphemes_Serial_Numbers_1[which(J_Res[Matched_Morphemes_Serial_Numbers_1, 10]=="ダ列タ系連用テ形")]#;fun_returning(a6)# “ようで”
            a7<-Matched_Morphemes_Serial_Numbers_1[which(J_Res[Matched_Morphemes_Serial_Numbers_1, 10]=="デアル列基本形")]#;fun_returning(a7)# “ようである”
            a8<-Matched_Morphemes_Serial_Numbers_1[which(J_Res[Matched_Morphemes_Serial_Numbers_1, 10]=="ダ列基本省略推量形")]#;fun_returning(a8)# “ようだろ”
            a9<-Matched_Morphemes_Serial_Numbers_1[which(J_Res[Matched_Morphemes_Serial_Numbers_1, 10]=="ダ列タ系条件形")]#;fun_returning(a9)# “ようだったら”
            a10<-Matched_Morphemes_Serial_Numbers_1[which(J_Res[Matched_Morphemes_Serial_Numbers_1, 10]=="ダ列タ形")]#;fun_returning(a10, 1)# “ようだった” 
          }
          #再对Matched_Morphemes_Serial_Numbers_2进行分解
          if(1){
            a11<-Matched_Morphemes_Serial_Numbers_2[which(str_detect(J_Res[Matched_Morphemes_Serial_Numbers_2+1, 1], "^だろ"))] # “ようだろ”，未然形。
            a12<-setdiff(Matched_Morphemes_Serial_Numbers_2, a11) # 对于“ように”，省略“に”；或者“ようであれば”。一言以概之，連用形。
          }
          #填充
          if(1){
            if(sum(c(a5, a8, a11))!=0){
              Pots_C_IX_J[[1]]<-sort(unique(c(a5, a8, a11)))
            }
            if(sum(c(a2, a6, a7, a9, a10, a12))!=0){
              Pots_C_IX_J[[2]]<-sort(unique(c(a2, a6, a7, a9, a10, a12)))
            }
            if(sum(c(a1, a4_1))!=0){
              Pots_C_IX_J[[3]]<-sort(unique(c(a1, a4_1)))
            }
            Pots_C_IX_J[[4]]<-a3
            Pots_C_IX_J[[5]]<-a4_2
          }
          #从内存中清除各个object
          rm(list=c("a1", "a2", "a3", "a4_1", "a4_2", "a5", "a6", "a7", "a8", "a9", "a10", "a11", "a12", "Matched_Morphemes_Serial_Numbers", "Matched_Morphemes_Serial_Numbers_1", "Matched_Morphemes_Serial_Numbers_2"))
        }
      }
      # X_らしい
      if(1){
        Matched_Morphemes_Serial_Numbers<-which(str_detect(J_Res[, 3], "らしい$"))%>%fun_limit(jn)
        Pots_C_X_J<-list(0, 0, 0, 0, 0, 0)
        if(length(Matched_Morphemes_Serial_Numbers)!=0){
          a<-Matched_Morphemes_Serial_Numbers[which(J_Res[Matched_Morphemes_Serial_Numbers, 10]=="文語未然形")] # “らしからぬ”
          b<-Matched_Morphemes_Serial_Numbers[which(J_Res[Matched_Morphemes_Serial_Numbers, 10]=="基本連用形")] # “らしく”
          c<-Matched_Morphemes_Serial_Numbers[which(J_Res[Matched_Morphemes_Serial_Numbers, 10]=="タ形")] # “らしかっ”
          d<-Matched_Morphemes_Serial_Numbers[which(J_Res[Matched_Morphemes_Serial_Numbers, 10]=="基本形")] # “らしい”
          d_1<-d[which(J_Res[d+1, 4]=="名詞")] # “連体形”
          d_2<-setdiff(d, d_1) # “終止形”
          e<-Matched_Morphemes_Serial_Numbers[which(J_Res[Matched_Morphemes_Serial_Numbers, 10]=="基本条件形")] # “らしけれ”
          f<-Matched_Morphemes_Serial_Numbers[which(J_Res[Matched_Morphemes_Serial_Numbers, 10]=="文語連体形")] # “らしき”
          Pots_C_X_J[[1]]<-sort(unique(c(b, c)))
          Pots_C_X_J[[2]]<-d_2
          Pots_C_X_J[[3]]<-d_1
          Pots_C_X_J[[4]]<-e
          Pots_C_X_J[[5]]<-a
          Pots_C_X_J[[6]]<-f
          rm(list=c("Matched_Morphemes_Serial_Numbers", "a", "b", "c", "d", "e", "f", "d_1", "d_2"))
        }
      }
      # XI_ます
      if(1){
        ## 由于Juman++识别精度太低了，只能用MeCab的结果。
        Matched_Morphemes_Serial_Numbers<-which(str_detect(M_Res[, 8], "^まする*$"))%>%fun_limit(mn)
        Pots_C_XI_M<-list(0, 0, 0, 0, 0, 0, 0)
        if(length(Matched_Morphemes_Serial_Numbers)!=0){
          a<-Matched_Morphemes_Serial_Numbers[which(str_detect(M_Res[Matched_Morphemes_Serial_Numbers, 7], "未然ウ接続|未然形"))]# 未然形
          b<-Matched_Morphemes_Serial_Numbers[which(M_Res[Matched_Morphemes_Serial_Numbers, 7]=="連用形")]# 連用形
          c<-Matched_Morphemes_Serial_Numbers[which(M_Res[Matched_Morphemes_Serial_Numbers, 7]=="基本形")]
          c_1<-c[which(M_Res[c+1, 2]!="名詞")]
          c_1_1<-0
          c_1_2<-0
          if(length(c_1)!=0){
            c_1_1<-c(c_1[which(M_Res[c_1+1, 1]=="る")],# “まする”
                     c[which(M_Res[c, 1]=="まする")])# “一些特殊情况，譬如：かえりみ_まする_に”
            c_1_2<-setdiff(c_1, c_1_1)# 真正的“終止形”
          }
          c_2<-c[which(M_Res[c+1, 2]=="名詞")]# 連体形
          d<-Matched_Morphemes_Serial_Numbers[which(M_Res[Matched_Morphemes_Serial_Numbers, 7]=="仮定形")]# 仮定形
          e<-Matched_Morphemes_Serial_Numbers[which(str_detect(M_Res[Matched_Morphemes_Serial_Numbers, 7], "命令"))]# 命令形
          Pots_C_XI_M[[1]]<-a
          Pots_C_XI_M[[2]]<-b
          Pots_C_XI_M[[3]]<-c_1_2
          Pots_C_XI_M[[4]]<-c_2
          Pots_C_XI_M[[5]]<-d
          Pots_C_XI_M[[6]]<-e
          Pots_C_XI_M[[7]]<-c_1_1
          rm(list=c("a", "b", "c", "c_1", "c_1_1", "c_1_2", "c_2", "d", "e", "Matched_Morphemes_Serial_Numbers"))
        }
      }
      # XII_だ
      if(1){
        Matched_Morphemes_Serial_Numbers<-which(M_Res[, 2]=="助動詞"&M_Res[, 8]=="だ")%>%fun_limit(mn)
        Pots_C_XII_M<-list(0, 0, 0, 0, 0)
        Extra_1<-which(str_detect(M_Res[, 1], ".*なのに$") & M_Res[, 2]=="接続詞")%>%fun_limit(mn)
        Extra_2<-which(M_Res[, 1]=="ので")%>%fun_limit(mn)
        if(length(Matched_Morphemes_Serial_Numbers)!=0){
          a<-Matched_Morphemes_Serial_Numbers[which(M_Res[Matched_Morphemes_Serial_Numbers, 7]=="未然形")] # 未然形：“だろ”
          b<-Matched_Morphemes_Serial_Numbers[which(str_detect(M_Res[Matched_Morphemes_Serial_Numbers, 7], "連用形|連用タ接続"))];b<-c(b, Extra_2) # 連用形：“だっ／で”
          c_temp<-Matched_Morphemes_Serial_Numbers[which(M_Res[Matched_Morphemes_Serial_Numbers, 7]=="基本形")]
          c_1<-c_temp[which(M_Res[c_temp+1, 1]=="のに")] # 其中，后接“のに”的需要择掉。
          c<-setdiff(c_temp, c_1) # 終止形：“だ”
          d<-Matched_Morphemes_Serial_Numbers[which(M_Res[Matched_Morphemes_Serial_Numbers, 7]=="体言接続")];d<-c(d, Extra_1) # 連体形：“な”
          e<-Matched_Morphemes_Serial_Numbers[which(M_Res[Matched_Morphemes_Serial_Numbers, 7]=="仮定形")] # 仮定形：“なら”
          Pots_C_XII_M[[1]]<-a
          Pots_C_XII_M[[2]]<-b
          Pots_C_XII_M[[3]]<-c
          Pots_C_XII_M[[4]]<-d
          Pots_C_XII_M[[5]]<-e
          rm(list=c("Extra_1", "Extra_2", "a", "b", "c_temp", "c_1", "c", "d", "e"))  
        }
      }
      # XIII_です
      if(1){
        Matched_Morphemes_Serial_Numbers<-which(M_Res[ ,2]=="助動詞"&M_Res[, 8]=="です")%>%fun_limit(mn)
        Pots_C_XIII_M<-list(0, 0, 0, 0)
        if(length(Matched_Morphemes_Serial_Numbers)!=0){
          special<-Matched_Morphemes_Serial_Numbers[which(M_Res[Matched_Morphemes_Serial_Numbers, 7]=="基本形")]
          following_noun<-0#后接名词
          following_non_noun<-0#后接非名词
          if(length(special)!=0){
            following_noun<-Matched_Morphemes_Serial_Numbers[which(M_Res[Matched_Morphemes_Serial_Numbers+1, 2]=="名詞"|M_Res[Matched_Morphemes_Serial_Numbers+1, 8]=="もん")] # 連体形
            following_non_noun<-setdiff(special, following_noun) # 終止形
          }
          Pots_C_XIII_M[[1]]<-Matched_Morphemes_Serial_Numbers[which(M_Res[Matched_Morphemes_Serial_Numbers, 7]=="未然形")]
          Pots_C_XIII_M[[2]]<-Matched_Morphemes_Serial_Numbers[which(M_Res[Matched_Morphemes_Serial_Numbers, 7]=="連用形")]
          Pots_C_XIII_M[[3]]<-following_non_noun
          Pots_C_XIII_M[[4]]<-following_noun
          rm(list=c("Matched_Morphemes_Serial_Numbers", "special", "following_non_noun", "following_noun"))
        }
      }
      # XIV_そうだ（様態）& XV_そうだ（伝聞）
      if(1){
        Matched_Morphemes_Serial_Numbers<-which(J_Res[, 3]=="そうだ"&J_Res[, 6]=="形容詞性述語接尾辞"|J_Res[, 8]=="助動詞そうだ型")%>%fun_limit(jn)
        Pots_C_XIV_J<-list(0, 0, 0, 0, 0, 0)
        Pots_C_XV_J<-list(0, 0, 0, 0, 0)
        #振り分け(第一段階)
        if(1){
          #様態
          #与动词/助动词/形容词/形容动词的常规接续
          a<-Matched_Morphemes_Serial_Numbers[which(extended_J_Res[Matched_Morphemes_Serial_Numbers+1, 10]=="基本連用形"|extended_J_Res[Matched_Morphemes_Serial_Numbers+1, 10]=="語幹"|extended_J_Res[Matched_Morphemes_Serial_Numbers+1, 4]=="名詞")]
          #変則接続（与助动词【ない】，【たい】需要在二者中间加入一个【さ】）
          linked_preceding_2_Morphemes<-cbind(extended_J_Res[Matched_Morphemes_Serial_Numbers, 1], extended_J_Res[Matched_Morphemes_Serial_Numbers+1, 1])
          adhered_preceding_2_Morphemes<-fun_glue(linked_preceding_2_Morphemes, direction=1, sep="")
          b<-Matched_Morphemes_Serial_Numbers[which(str_detect(adhered_preceding_2_Morphemes, ".*[たな]さ$"))]
          temp_Souda_state<-c(a, b)
          #伝聞
          temp_Souda_hearsay<-setdiff(Matched_Morphemes_Serial_Numbers, temp_Souda_state)
          rm(list=c("a", "b", "linked_preceding_2_Morphemes", "adhered_preceding_2_Morphemes", "Matched_Morphemes_Serial_Numbers"))
        }
        #振り分け（第二段階）
        if(1){
          #【様態】
          if(length(temp_Souda_state)!=0){
            state_a<-temp_Souda_state[which(str_detect(J_Res[temp_Souda_state, 1], "^そう(だろう?$|でしょう?$)"))]#未然
            state_b<-temp_Souda_state[which(str_detect(J_Res[temp_Souda_state, 1], "^そう(だっ|で$|に$)"))]#連用
            state_c<-temp_Souda_state[which(str_detect(J_Res[temp_Souda_state, 1], "^そう(だ$|です$|でした$|でして$)"))]#終止
            state_d<-temp_Souda_state[which(J_Res[temp_Souda_state, 1]=="そうな")]#連体
            state_suspicion<-temp_Souda_state[which(J_Res[temp_Souda_state, 1]=="そう")]#尚待细分
            state_e<-0
            state_f<-0
            if(length(state_suspicion)!=0){
              state_e<-state_suspicion[which(J_Res[state_suspicion+1, 1]=="なら")]#仮定
              state_f<-setdiff(state_suspicion, state_e)#語幹
            }
            Pots_C_XIV_J[[1]]<-state_a
            Pots_C_XIV_J[[2]]<-state_b
            Pots_C_XIV_J[[3]]<-state_c
            Pots_C_XIV_J[[4]]<-state_d
            Pots_C_XIV_J[[5]]<-state_e
            Pots_C_XIV_J[[6]]<-state_f
            rm(list=c("temp_Souda_state", "state_suspicion", "state_a", "state_b", "state_c", "state_d", "state_e", "state_f"))
          }
          #【伝聞】
          if(length(temp_Souda_hearsay)!=0){
            hearsay_a<-temp_Souda_hearsay[which(str_detect(J_Res[temp_Souda_hearsay, 1], "^そう(だろう?$|でしょう?$)"))]#未然
            hearsay_b<-temp_Souda_hearsay[which(J_Res[temp_Souda_hearsay, 1]=="そうで")]#連用
            hearsay_c<-temp_Souda_hearsay[which(str_detect(J_Res[temp_Souda_hearsay, 1], "^そう(だ$|です$|でした$|でして$)"))]#終止
            hearsay_d<-temp_Souda_hearsay[which(J_Res[temp_Souda_hearsay, 1]=="そうな")]#連体
            hearsay_e<-temp_Souda_hearsay[which(J_Res[temp_Souda_hearsay, 1]=="そう")]#語幹
            Pots_C_XV_J[[1]]<-hearsay_a
            Pots_C_XV_J[[2]]<-hearsay_b
            Pots_C_XV_J[[3]]<-hearsay_c
            Pots_C_XV_J[[4]]<-hearsay_d
            Pots_C_XV_J[[5]]<-hearsay_e
            rm(list=c("temp_Souda_hearsay", "hearsay_a", "hearsay_b", "hearsay_c", "hearsay_d", "hearsay_e"))
          }
        }
      }
    }
    ##文語体
    if(1){
      ## 1_"しめる"
      if(1){
        Matched_Morphemes_Serial_Numbers<-which(J_Res[, 3]=="しめる" & J_Res[, 4]=="接尾辞")%>%fun_limit(jn)
        Pots_L_1_J<-list(0, 0, 0, 0, 0, 0)
        if(1){
          # extra
          # 动词【たらしめる（足らしめる）】的“連用形”无法被Juman++正确检测出，故需要择出来单独处理。
          extra<-length(unlist(str_match_all(x, pattern="[足た]らしめ[、て]")))
          extra_pos<-NULL
          if(extra!=0){
            extra_pos_temp<-which(str_detect(M_Res[,1], "^[足た]ら$"))+1
            extra_pos<-extra_pos_temp[which(M_Res[extra_pos_temp, 1]=="しめ")]%>%fun_limit(jn)
          }
        }
        Matched_Morphemes_Serial_Numbers<-unique(c(Matched_Morphemes_Serial_Numbers, extra_pos))
        if(length(Matched_Morphemes_Serial_Numbers)!=0){
          if(1){
            c_1<-numeric(0)
            c_2<-numeric(0)
            a<-Matched_Morphemes_Serial_Numbers[which(str_detect(J_Res[Matched_Morphemes_Serial_Numbers, 10], "未然形|意志形"))] # 未然形
            b<-Matched_Morphemes_Serial_Numbers[which(str_detect(J_Res[Matched_Morphemes_Serial_Numbers, 10], "^タ[系形].*|基本連用形"))] 
            b<-unique(c(b, extra_pos)) # 連用形
            c<-Matched_Morphemes_Serial_Numbers[which(J_Res[Matched_Morphemes_Serial_Numbers, 10]=="基本形")]
            if(length(c)){
              c_2<-c[which(J_Res[c+1, 4]=="名詞")] # 連体形
              c_1<-setdiff(c, c_2) # 終止形
            }
            d<-Matched_Morphemes_Serial_Numbers[which(J_Res[Matched_Morphemes_Serial_Numbers, 10]=="基本条件形")] # 仮定形
            e<-Matched_Morphemes_Serial_Numbers[which(str_detect(J_Res[Matched_Morphemes_Serial_Numbers, 10], "命令形"))] # 命令形
            Pots_L_1_J[[1]]<-a
            Pots_L_1_J[[2]]<-b
            Pots_L_1_J[[3]]<-c_1
            Pots_L_1_J[[4]]<-c_2
            Pots_L_1_J[[5]]<-d
            Pots_L_1_J[[6]]<-e
          }
          rm(list=c("a", "b", "c", "c_1", "c_2", "d", "e", "Matched_Morphemes_Serial_Numbers", "extra"))
        }
      }
      ## 2_"む"
      if(1){
        ## Comment:
        ##----
        #在查阅了文献（下2行）之后，将“[ぬん]ばかり”中的“[ぬん]”也视为“む”的变形（或音便）
        #小林賢次(1994). 「（言わ）んばかり」考：国語辞典類の意味記述をめぐって.日本語研究. 14, 109-116.
        #小林賢次(1995). 「（言わ）んばかり」考：慣用表現の成立と展開. 日本語研究. 15, 194-204.
        ##----
        Matched_Morphemes_Serial_Numbers<-which(M_Res[, 2]=="助動詞"&M_Res[, 6]=="不変化型"&M_Res[, 7]=="基本形"&M_Res[, 8]=="ん")%>%fun_limit(mn)
        if(nitakuitsu){
          Matched_Morphemes_Serial_Numbers<-setdiff(Matched_Morphemes_Serial_Numbers, nitakuitsu_num)
        }
        Pots_L_2_M<-list(0, 0)
        if(length(Matched_Morphemes_Serial_Numbers)!=0){
          Attributive_Form<-Matched_Morphemes_Serial_Numbers[which(M_Res[Matched_Morphemes_Serial_Numbers+1, 2]=="名詞"|M_Res[Matched_Morphemes_Serial_Numbers+1, 1]=="ばかり")]
          End_Form<-setdiff(Matched_Morphemes_Serial_Numbers, Attributive_Form)
          Pots_L_2_M[[1]]<-End_Form;Pots_L_2_M[[2]]<-Attributive_Form
          rm(list=c("Matched_Morphemes_Serial_Numbers", "Attributive_Form", "End_Form"))
        }
      }
      ## 3_"き"
      if(1){
        Matched_Morphemes_Serial_Numbers<-which(M_Res[, 2]=="助動詞"&M_Res[, 6]=="文語・キ")%>%fun_limit(mn)
        extra<-unlist(str_match_all(x, "[来き]たりし|[来き]し方"))
        if(length(extra)!=0){
          if(str_detect(x, "[来き]たりし")){#ここのxは純然たる文字列であるため，any()関数を使う必然性がない
            if(str_detect(x, "来")){
              extra_pos_temp<-which(M_Res[,1]=="来")%>%fun_limit(mn)
              extra_pos<-extra_pos_temp[which(M_Res[extra_pos_temp+1, 1]=="たり"&M_Res[extra_pos_temp+2, 1]=="し")]
            }else{
              extra_pos_temp<-which(M_Res[, 1]=="きたり")%>%fun_limit(mn)
              extra_pos<-extra_pos_temp[which(M_Res[extra_pos_temp+1, 1]=="し")]
            }
          }else{
            extra_pos<-which(str_detect(M_Res[,1], "^[来き]し.*$"))%>%fun_limit(mn)
          }
        }
        Pots_L_3_M<-list(0, 0)
        if(length(Matched_Morphemes_Serial_Numbers)!=0){
          Pots_L_3_M[[1]]<-which(M_Res[Matched_Morphemes_Serial_Numbers, 1]=="き")
          Pots_L_3_M[[2]]<-sort(unique(which(M_Res[Matched_Morphemes_Serial_Numbers, 1]=="し"), extra_pos))
          rm(list=c("Matched_Morphemes_Serial_Numbers", "extra"))
        }
      }
      ## 4_"けり"
      if(1){
        Matched_Morphemes_Serial_Numbers<-which(M_Res[, 2]=="助動詞"&M_Res[, 6]=="文語・ケリ"&M_Res[, 8]=="けり")%>%fun_limit(mn)
        Pots_L_4_M<-list(0)
        extra<-unlist(str_match_all(x, "によりけり"))
        extra_pos_temp<-NULL
        extra_pos<-0
        if(length(extra)!=0){
          extra_pos_temp<-which(M_Res[,1]=="により")%>%fun_limit(mn)
          extra_pos<-extra_pos_temp[which(M_Res[extra_pos_temp+1, 1]=="けり")]+1
        }
        if(length(Matched_Morphemes_Serial_Numbers)>0){
          Pots_L_4_M[[1]]<-sort(unique(c(Matched_Morphemes_Serial_Numbers, extra_pos)))
        }else{
          Pots_L_4_M[[1]]<-extra_pos
        }
        rm(list=c("Matched_Morphemes_Serial_Numbers", "extra", "extra_pos", "extra_pos_temp"))
      }
      ## 5_"つ"
      if(1){
        Matched_Morphemes_Serial_Numbers<-which(M_Res[, 2]=="助動詞"&M_Res[, 8]=="つ")%>%fun_limit(mn)
        Pots_L_5_M<-list(0)
        if(length(Matched_Morphemes_Serial_Numbers)!=0){
          Pots_L_5_M[[1]]<-Matched_Morphemes_Serial_Numbers
        }
        rm(Matched_Morphemes_Serial_Numbers)
      }
      ## 6_"ぬ"
      if(1){
        Matched_Morphemes_Serial_Numbers<-which(M_Res[, 2]=="助動詞"&M_Res[, 6]=="不変化型"&M_Res[, 8]=="ぬ")%>%fun_limit(mn)
        Pots_L_6_M<-list(0)
        if(length(Matched_Morphemes_Serial_Numbers)!=0){
          Pots_L_6_M[[1]]<-Matched_Morphemes_Serial_Numbers
        }
        rm(Matched_Morphemes_Serial_Numbers)
      }
      ## 7_"たり"（完了）; 14_"たり"（断定）
      if(1){
        Matched_Morphemes_Serial_Numbers<-which((M_Res[, 1]=="たり"&M_Res[, 3]=="並立助詞")|(M_Res[, 6]=="文語・ナリ"&M_Res[, 8]=="たり"))%>%fun_limit(mn)
        Pots_L_7_M<-list(0, 0, 0, 0, 0, 0)
        pos_extra_sitarigao<-0
        Pots_L_14_M<-list(0, 0, 0, 0, 0, 0)
        if(length(Matched_Morphemes_Serial_Numbers)!=0){
          #マッチング
          if(1){
            extra_remove<-Matched_Morphemes_Serial_Numbers[which(extended_M_Res[Matched_Morphemes_Serial_Numbers+1, 1]=="し"&extended_M_Res[Matched_Morphemes_Serial_Numbers+3, 1]=="顔")]
            Matched_Morphemes_Serial_Numbers<-setdiff(Matched_Morphemes_Serial_Numbers, extra_remove)
            extra_add_0_pre<-which(str_detect(M_Res[, 1], "^た[られる]$")&M_Res[, 6]!="文語・ナリ")%>%fun_limit(mn)#对于像「堂々たる」这种以「たる」结尾的匹配字符串的基本形，未然形和假定形，应收尽收。
            extra_add_0<-extra_add_0_pre[which(extended_M_Res[extra_add_0_pre+1, 2]=="副詞"|extended_M_Res[extra_add_0_pre+1, 7]=="連用形"|str_detect(extended_M_Res[extra_add_0_pre+1, 1], ".*[き来]$"))]
            extra_add_1<-which(str_detect(M_Res[, 2], "^名詞$|^連体詞$")&str_detect(M_Res[, 1], ".+たる"))%>%fun_limit(mn)#「平然たる」や「確たる」などへの対策
            extra_add_2_pre<-which(M_Res[, 2]=="名詞"&str_detect(M_Res[, 1], "^た[りるれ].+$"))%>%fun_limit(mn)#「られたる者」対策
            extra_add_2<-extra_add_2_pre[which(extended_M_Res[extra_add_2_pre+1, 7]=="連用形")]
            pos_extra_sitarigao<-which(M_Res[, 1]=="したり顔")%>%fun_limit(mn)#2021_4_23追加
            extra_sitarigao<-length(unlist(str_match_all(x, "したり顔")))#「したり顔」を回収
            Matched_Morphemes_Serial_Numbers<-sort(c(Matched_Morphemes_Serial_Numbers, extra_add_0, extra_add_1, extra_add_2))%>%fun_limit(mn)#汇总
            rm(list=c("extra_remove", "extra_add_0_pre", "extra_add_0", "extra_add_1", "extra_add_2_pre", "extra_add_2"))#从内存中清空用済み的对象
          }
          #振り分けⅠ（将マッチング所得的形态素编号分配给“たり（完了助動詞）”和“たり（断定助動詞）”）
          if(1){
            Just_Before_Verb<-Matched_Morphemes_Serial_Numbers[which(extended_M_Res[Matched_Morphemes_Serial_Numbers+1, 2]=="動詞")]
            Just_Before_Verb_Continuative_Form<-Just_Before_Verb[which(extended_M_Res[Just_Before_Verb+1, 7]=="連用形")]
            Just_Before_Noun<-Matched_Morphemes_Serial_Numbers[which(extended_M_Res[Matched_Morphemes_Serial_Numbers+1, 2]=="名詞")]
            extra_special_circumstances<-Just_Before_Noun[which(str_detect(extended_M_Res[Just_Before_Noun+1, 1], ".+来$"))]
            extra_special_circumstances_1<-Matched_Morphemes_Serial_Numbers[which(str_detect(M_Res[Matched_Morphemes_Serial_Numbers, 1], ".+来たる"))]
            Completion<-sort(c(Just_Before_Verb_Continuative_Form, extra_special_circumstances, extra_special_circumstances_1))#完了
            Conclusion<-setdiff(Matched_Morphemes_Serial_Numbers, Completion)#断定
          }
          #振り分けⅡ（将振り分けⅠ后的两个“たり”分配给各个活用形）
          if(1){
            #完了
            #----
            Imperfective_Form<-Completion[which(M_Res[Completion, 1]=="たら")]#未然形
            temp<-Completion[which(M_Res[Completion, 1]=="たり")]
            End_Form<-temp[which(str_detect(M_Res[temp+1, 2], "名詞|記号"))]#終止形
            Continuative_Form<-setdiff(temp, End_Form)#連用形
            Attributive_Form<-Completion[which(str_detect(M_Res[Completion, 1], "^たる.*$"))]#連体形
            Attributive_Form_extra<-Completion[which(str_detect(M_Res[Completion, 1], "^.+来たる$"))]
            Attributive_Form<-sort(unique(c(Attributive_Form, Attributive_Form_extra)))
            temp_1<-Completion[which(str_detect(M_Res[Completion, 1], "^たれ.*$"))]
            Conditional_Form<-temp_1[which(str_detect(M_Res[temp_1+1, 1], "^ば.*$"))]
            Imperative_Form<-setdiff(temp_1, Conditional_Form)#命令形
            if(1){
              Pots_L_7_M[[1]]<-Imperfective_Form#未然形
              Pots_L_7_M[[2]]<-Continuative_Form#连用形
              Pots_L_7_M[[3]]<-End_Form#终止形
              Pots_L_7_M[[4]]<-Attributive_Form#连体形
              Pots_L_7_M[[5]]<-Conditional_Form#假定形
              Pots_L_7_M[[6]]<-Imperative_Form#命令形
            }
            rm(list=c("Imperfective_Form", "End_Form", "Continuative_Form", "Attributive_Form", "Conditional_Form", "Imperative_Form", "temp", "temp_1"))
            #----
            #断定
            #----
            Imperfective_Form<-Conclusion[which(M_Res[Conclusion, 1]=="たら")]#未然形
            temp<-Conclusion[which(M_Res[Conclusion, 1]=="たり")]
            End_Form<-temp[which(str_detect(M_Res[temp+1, 2], "名詞|記号"))]#終止形
            Continuative_Form<-setdiff(temp, End_Form)#連用形
            Attributive_Form<-Conclusion[which(str_detect(M_Res[Conclusion, 1], "^.*たる$"))]#連体形
            temp_1<-Conclusion[which(M_Res[Conclusion, 1]=="たれ")]
            Conditional_Form<-temp_1[which(M_Res[temp_1+1, 1]=="ば")]#仮定形
            Imperative_Form<-setdiff(temp_1, Conditional_Form)#命令形
            if(1){
              Pots_L_14_M[[1]]<-Imperfective_Form#未然形
              Pots_L_14_M[[2]]<-Continuative_Form#连用形
              Pots_L_14_M[[3]]<-End_Form#终止形
              Pots_L_14_M[[4]]<-Attributive_Form#连体形
              Pots_L_14_M[[5]]<-Conditional_Form#假定形
              Pots_L_14_M[[6]]<-Imperative_Form#命令形
            }
            rm(list=c("Imperfective_Form", "End_Form", "Continuative_Form", "Attributive_Form", "Conditional_Form", "Imperative_Form", "temp", "temp_1"))
            #----
          }
        }
        Pots_L_7_M[[3]]<-sort(unique(c(Pots_L_7_M[[3]], pos_extra_sitarigao)))%>%fun_limit(mn)
      }
      ## 8_"たし"
      if(1){
        Matched_Morphemes_Serial_Numbers<-which(M_Res[, 1]=="た"&M_Res[, 2]=="助動詞")%>%fun_limit(mn)
        Pots_L_8_M<-list(0)
        if(length(Matched_Morphemes_Serial_Numbers)!=0){
          Pots_L_8_M[[1]]<-which(extended_M_Res[Matched_Morphemes_Serial_Numbers, 2]=="動詞"&extended_M_Res[Matched_Morphemes_Serial_Numbers, 7]=="未然形"&extended_M_Res[Matched_Morphemes_Serial_Numbers+1, 1]=="れ"&M_Res[Matched_Morphemes_Serial_Numbers+1, 1]=="し")
          rm(Matched_Morphemes_Serial_Numbers)
        }
      }
      ## 9_"べし"
      if(1){
        Pots_L_9_M<-list(0, 0, 0, 0)
        #事前に“べし”及び一連の活用形について表記の一本化を行った，以下のスクリプトに何の問題もない．
        Imperfective_Form<-which(M_Res[, 1]=="べから")%>%fun_limit(mn)
        Continuative_Form<-which(M_Res[, 1]=="べく")%>%fun_limit(mn)
        End_Form<-which(M_Res[, 1]=="べし")%>%fun_limit(mn)
        Attributive_Form<-which(M_Res[, 1]=="べき")%>%fun_limit(mn)
        Pots_L_9_M[[1]]<-Imperfective_Form
        Pots_L_9_M[[2]]<-Continuative_Form
        Pots_L_9_M[[3]]<-End_Form
        Pots_L_9_M[[4]]<-Attributive_Form
        rm(list=c("Imperfective_Form", "Continuative_Form", "End_Form", "Attributive_Form"))
      }
      ## 10_"まじ"
      if(1){
        Matched_Morphemes_Serial_Numbers<-which(M_Res[, 2]=="助動詞"&M_Res[, 6]=="文語・マジ"&M_Res[, 8]=="まじ")%>%fun_limit(mn)
        Pots_L_12_M<-list(0, 0)
        if(length(Matched_Morphemes_Serial_Numbers)!=0){
          Pots_L_12_M[[1]]<-which(M_Res[Matched_Morphemes_Serial_Numbers, 1]=="まじ"&M_Res[Matched_Morphemes_Serial_Numbers, 7]=="基本形")
          Pots_L_12_M[[2]]<-which(M_Res[Matched_Morphemes_Serial_Numbers, 1]=="まじき"&M_Res[Matched_Morphemes_Serial_Numbers, 7]=="体言接続")  
          rm(Matched_Morphemes_Serial_Numbers)
        }
      }
      ## 11_"なり"
      if(1){
        temp_0<-which(str_detect(M_Res[, 1], "^な[らりれ]$"))%>%fun_limit(mn)
        temp_0<-temp_0[which(temp_0>=3)]
        if(length(temp_0)!=0){
          a<-temp_0[which(str_detect(extended_M_Res[temp_0+1, 2], "名詞|接続詞|副詞|助詞|接頭詞|形容動詞")&M_Res[temp_0, 1]=="なり"&str_detect(M_Res[temp_0+1, 1], "^(?!ま[し|す]).*$"))]
          b<-temp_0[which(extended_M_Res[temp_0, 2]=="名詞"&str_detect(extended_M_Res[temp_0+1, 1], "^へ|ばかり$")&M_Res[temp_0, 1]=="なり"&str_detect(M_Res[temp_0+1, 1], "^(?!ま[しす]|た[くい]|たかっ).*$"))]
          c<-temp_0[which(extended_M_Res[temp_0+1, 2]=="動詞"&extended_M_Res[temp_0+1, 7]=="基本形")]
          d<-temp_0[which(extended_M_Res[temp_0+1, 7]=="体言接続")]
          e<-temp_0[which(str_detect(extended_M_Res[temp_0+1, 2], "名詞|接続詞|副詞|接頭詞|形容動詞")&M_Res[temp_0, 1]=="なれ"&M_Res[temp_0+1, 1]=="ば"&M_Res[temp_0+2, 1]=="こそ")]
          f<-temp_0[which(str_detect(extended_M_Res[temp_0+1, 2], "名詞|接続詞|副詞|接頭詞|形容動詞")&M_Res[temp_0, 1]=="なら"&str_detect(M_Res[temp_0+1, 1], "^ず|ぬ$"))]
          temp_0<-sort(unique(c(a, b, c, d, e, f))) 
          rm(list=c("a", "b", "c", "d", "e", "f"))
        }
        temp_1<-which(str_detect(M_Res[, 1], "^.+なる$"))%>%fun_limit(mn)
        temp_1<-temp_1[which(M_Res[temp_1+1, 2]=="名詞")]
        temp_2<-which(M_Res[, 1]=="なる")%>%fun_limit(mn)
        temp_2<-temp_2[which(str_detect(extended_M_Res[temp_2+1, 2], "形容動詞|名詞|接続詞|副詞|接頭詞")&M_Res[temp_2+1, 2]=="名詞")]
        Matched_Morphemes_Serial_Numbers<-sort(unique(c(temp_0, temp_1, temp_2)))
        Pots_L_13_M<-list(0, 0, 0, 0)
        if(length(Matched_Morphemes_Serial_Numbers)!=0){
          Imperfective_Form<-Matched_Morphemes_Serial_Numbers[which(str_detect(M_Res[Matched_Morphemes_Serial_Numbers, 1], ".*なら.*"))]
          End_Form<-Matched_Morphemes_Serial_Numbers[which(M_Res[Matched_Morphemes_Serial_Numbers, 1]=="なり")]
          Attributive_Form<-Matched_Morphemes_Serial_Numbers[which(str_detect(M_Res[Matched_Morphemes_Serial_Numbers, 1], ".*なる$"))]
          Conditional_Form<-Matched_Morphemes_Serial_Numbers[which(M_Res[Matched_Morphemes_Serial_Numbers, 1]=="なれ")]
          Pots_L_13_M[[1]]<-Imperfective_Form
          Pots_L_13_M[[2]]<-End_Form
          Pots_L_13_M[[3]]<-Attributive_Form
          Pots_L_13_M[[4]]<-Conditional_Form  
          rm(list=c("Matched_Morphemes_Serial_Numbers", "temp_0", "temp_1", "temp_2", "Imperfective_Form", "End_Form", "Attributive_Form", "Conditional_Form"))
        }
        if(any(str_detect(x, "大なり小なり"))){#对“大なり小なり”进行特殊处理
          Nari_pos<-which(M_Res[,1]=="なり")%>%fun_limit(mn)
          first_Nari_pos<-Nari_pos[which(extended_M_Res[Nari_pos+1, 1]=="大")]
          second_Nari_pos<-Nari_pos[which(extended_M_Res[Nari_pos+1, 1]=="小")]
          Pots_L_13_M[[2]]<-sort(unique(c(Pots_L_13_M[[2]], first_Nari_pos, second_Nari_pos)))
        }
      }
      ## 13_"ごとし"
      if(1){
        temp<-which(str_detect(J_Res[, 1], "^(如|若|ごと)[くしき]$"))%>%fun_limit(jn)
        Pots_L_15_J<-list(0, 0, 0)
        Pots_L_15_J[[1]]<-temp[which(str_detect(J_Res[temp, 1], "^(如|若|ごと)く$"))]
        Pots_L_15_J[[2]]<-temp[which(str_detect(J_Res[temp, 1], "^(如|若|ごと)し$"))]
        Pots_L_15_J[[3]]<-temp[which(str_detect(J_Res[temp, 1], "^(如|若|ごと)き$"))]
        rm(temp)
      }
    }
  }
  #最后，将上述两个模块的结果整合
  if(1){
    if(1){
      #为助动词词素准备最深层标签，即活用形
      CFT4AuxVerbs_コウゴ<-list(#此处的对象名前半部分的“CFT4AuxVerbs”为“Conjugated Forms Tag for Auxiliary Verbs”的缩写；后半部分的“コウゴ”为其字面意思，即“口語形”。
        Full_Set,#I_せる/らせる
        Full_Set,#II_れる/られる
        Full_Set[-6],#III_ない
        Full_Set[2:5],#IV_ぬ
        Full_Set[3:4],#V_う/よう
        Full_Set[3:4],#VI_まい
        c(Full_Set[-6], "連用ゴザイ接続"),#VII_たい
        Full_Set[-6],#VII_たがる
        Full_Set[-c(1, 6)],#VIII_た/だ
        Full_Set[-6],#IX_ようだ
        c(Full_Set[2:5], "文語未然形", "文語連体形"),#X_らしい
        c(Full_Set, "古い終止形・連体形"),#XI_ます
        c(Full_Set[-6]),#XII_だ
        c(Full_Set[1:4]),#XIII_です
        c(Full_Set[1:5], "語幹"),#XIV_そうだ（様態）
        c(Full_Set[1:4], "語幹"))#XV_そうだ（伝聞）
      CFT4AuxVerbs_ブンゴ<-list(#此处的对象名前半部分的“CFT4AuxVerbs”为“Conjugated Forms Tag for Auxiliary Verbs”的缩写；后半部分的“ブンゴ”为其字面意思，即“文語形”。
        Full_Set,#1_しめる
        Full_Set[3:4],#2_む
        Full_Set[3:4],#3_き
        Full_Set[3],#4_けり
        Full_Set[3],#5_つ
        Full_Set[3],#6_ぬ
        Full_Set,#7_たり（完了）
        Full_Set[3],#8_たし
        Full_Set[1:4],#9_べし
        Full_Set[3:4],#10_まじ
        Full_Set[-c(2, 6)],#11_なり
        Full_Set,#12_たり（断定）
        Full_Set[2:4])#13_ごとし
      if(1){
        Deepest_コウゴ<-list()#口语体助动词最深层标签
        Deepest_ブンゴ<-list()#文语体助动词最深层标签
        for(i in 1:16) Deepest_コウゴ[[i]]<-paste(Colloquial_Style_Basic_Forms[i], CFT4AuxVerbs_コウゴ[[i]], sep="_")
        for(i in 1:13) Deepest_ブンゴ[[i]]<-paste(Literary_Style_Basic_Forms[i], CFT4AuxVerbs_ブンゴ[[i]], sep="_")
      }#最深层标签构成模式为：（助动词）基本型+活用形
      #将存储了词素解析结果中各助动词（口语体）活用形行编号的list对象统合为一个新的list对象。
      POTS_A<-list(Pots_C_I_J,         #1  J -
                   Pots_C_II_J,        #2  J -
                   Pots_C_III_J,       #3  J -
                   Pots_C_IV_M,        #4  M +
                   Pots_C_V_J,         #5  J -
                   Pots_C_VI_J,        #6  J -
                   Pots_C_VII_M_Tai,   #7  M +
                   Pots_C_VII_M_TaGaRu,#8  M +
                   Pots_C_VIII_J,      #9  J -
                   Pots_C_IX_J,        #10 J -
                   Pots_C_X_J,         #11 J -
                   Pots_C_XI_M,        #12 M +
                   Pots_C_XII_M,       #13 M +
                   Pots_C_XIII_M,      #14 M +
                   Pots_C_XIV_J,       #15 J -
                   Pots_C_XV_J)        #16 J -
      POTS_A<-fun_wash_integer0(POTS_A)
      names(POTS_A)<-Colloquial_Style_Basic_Forms
      for(i in 1:16){
        names(POTS_A[[i]])<-Deepest_コウゴ[[i]]
      }#为口语体助动词赋名以最深层标签
      #将存储了词素解析结果中各助动词（文语体）活用形行编号的list对象统合为一个新的list对象。
      POTS_B<-list(Pots_L_1_J,         #1  J -
                   Pots_L_2_M,         #2  M +
                   Pots_L_3_M,         #3  M +
                   Pots_L_4_M,         #4  M +
                   Pots_L_5_M,         #5  M +
                   Pots_L_6_M,         #6  M +
                   Pots_L_7_M,         #7  M +
                   Pots_L_8_M,         #8  M +
                   Pots_L_9_M,         #9  M +
                   Pots_L_12_M,        #10 M + 
                   Pots_L_13_M,        #11 M +
                   Pots_L_14_M,        #12 M +
                   Pots_L_15_J)        #13 J -
      names(POTS_B)<-Literary_Style_Basic_Forms
      POTS_B<-fun_wash_integer0(POTS_B)
      for(i in 1:13){
        names(POTS_B[[i]])<-Deepest_ブンゴ[[i]]
      }#为文语体助动词赋名以最深层标签
      #将POTS_A与POTS_B划分为以“M”结尾的和以“J”结尾的list对象群（备注：M为主，J为辅）
      End_with_J<-list(#共12个list对象
        POTS_A[[1]], POTS_A[[2]], POTS_A[[3]], POTS_A[[5]], POTS_A[[6]], POTS_A[[9]], POTS_A[[10]], POTS_A[[11]], POTS_A[[15]], POTS_A[[16]],#POTS_A中，以“J”结尾的对象列表
        POTS_B[[1]], POTS_B[[13]])#POTS_B中，以“J”结尾的对象列表。
      End_with_J<-fun_wash_integer0(End_with_J); names(End_with_J)<-c(names(POTS_A)[c(1, 2, 3, 5, 6, 9, 10, 11, 15, 16)], names(POTS_B)[c(1, 13)])
      End_with_M<-list(#共16个list对象
        POTS_A[[4]], POTS_A[[7]], POTS_A[[8]], POTS_A[[12]], POTS_A[[13]], POTS_A[[14]],#POTS_A中，以“M”结尾的对象列表
        POTS_B[[2]], POTS_B[[3]], POTS_B[[4]], POTS_B[[5]], POTS_B[[6]], POTS_B[[7]], POTS_B[[8]], POTS_B[[9]], POTS_B[[10]], POTS_B[[11]], POTS_B[[12]])#POTS_B中，以“M”结尾的对象列表
      End_with_M<-fun_wash_integer0(End_with_M)
      names(End_with_M)<-c(names(POTS_A)[c(4, 7, 8, 12, 13, 14)], names(POTS_B)[c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)])
      #寻找End_with_J中的非零元素，并将其
      #（1）在J_Res中的行编号、
      #（2）对应助动词的基本形（对象Pots_C/L_d_M/J的名称）、
      #（3）对应助动词的活用形（对象Pots_C/L_d_M/J中非零元素的坐标）
      #作为4个元素中的后3个构成1个data.frame对象
      if(1){
        #----
        #准备4列：第1列为浅层品词标签（“助动词”）、
        #         第2列为位置，即（J_Res中的）行编号、
        #         第3列为助动词基本形、
        #         第4列为助动词活用形的种类。
        #----
        column_1_J<-NULL#浅层品词标签，即“助動詞”
        column_2_J<-NULL#（J_Res中的）行编号
        column_3_J<-NULL#助动词基本形
        column_4_J<-NULL#助动词活用形种类
        #----
        #层级如下：
        #End_with_J
        #　-> POTS_A/B[[i]]              e.g., End_with_J[[i]]=「です」
        #　　-> POTS_A/B[[i]][[j]]       e.g., 「です」[[j]]=「でし」
        #　　　-> POTS_A/B[[i]][[j]][k]  e.g., 「でし」[k]=n（在J_Res中的行编号，数量为1）
        #----
        for(i in 1:12){#对End_with_J就行遴选
          current_len<-length(End_with_J[[i]])#当前list对象（助动词J_i）拥有的活用形种类数
          for(j in 1:current_len){
            if(sum(End_with_J[[i]][[j]])!=0){#对当前助动词的每一种活用形的list对象，检查其中是否含非零元素。
              temp_len<-length(End_with_J[[i]][[j]])
              column_1_J<-c(column_1_J, rep("助動詞", temp_len))#为第1列新添1个“助動詞”标签
              column_2_J<-c(column_2_J, End_with_J[[i]][[j]])#存储行编号
              column_3_J<-c(column_3_J, rep(names(End_with_J)[i], temp_len))#存储助动词基本形
              column_4_J<-c(column_4_J, rep(names(End_with_J[[i]])[j], temp_len))#存储助动词活用形种类
            }
          }
        }
        #将上述4列汇总成1个df对象，用来存储中期结果（即J_Res中获匹配助动词的相关信息）
        HIT_J<-data.frame(表层品词标签=column_1_J,
                                行编号=column_2_J,
                                基本形=column_3_J,
                            活用形种类=column_4_J)
        J_wait2project_sn<-HIT_J[, 2]
      }
      #寻找End_with_M中的非零元素，并将其
      #（1）在M_Res中的行编号、
      #（2）对应助动词的基本形（对象Pots_C/L_d_M/J的名称）、
      #（3）对应助动词的活用形（对象Pots_C/L_d_M/J中非零元素的坐标）
      #作为4个元素中的后3个构成1个data.frame对象
      if(1){
        #准备4列：第1列为浅层品词标签（“助动词”）、
        #         第2列为位置，即（J_Res中的）行编号、
        #         第3列为助动词基本形、
        #         第4列为助动词活用形的种类。
        column_1_M<-NULL#浅层品词标签，即“助動詞”
        column_2_M<-NULL#行编号
        column_3_M<-NULL#助动词基本形
        column_4_M<-NULL#助动词活用形种类
        for(i in 1:17){
          current_len<-length(End_with_M[[i]])
          for(j in 1:current_len){
            if(sum(End_with_M[[i]][[j]])!=0){
              temp_len<-length(End_with_M[[i]][[j]])
              column_1_M<-c(column_1_M, rep("助動詞", temp_len))
              column_2_M<-c(column_2_M, End_with_M[[i]][[j]])
              column_3_M<-c(column_3_M, rep(names(End_with_M)[i], temp_len))
              column_4_M<-c(column_4_M, rep(names(End_with_M[[i]])[j], temp_len))
            }
          }
        }
        #将上述4列汇总成1个df对象，用来存储中期结果（即M_Res中获匹配助动词的相关信息）
        HIT_M<-data.frame(表层品词标签=column_1_M,
                                行编号=column_2_M,
                                基本形=column_3_M,
                            活用形种类=column_4_M)
      }
      nrow_J<-nrow(HIT_J)#J_Res中匹配到的词素数
      nrow_M<-nrow(HIT_M)#M_Res中匹配到的词素数
    }# 制作最深层标签
    if(1){
      charLen_per_Mmorpheme<-net_M_Res[, 1]%>%nchar
        EndChar_per_Mmorpheme<-cumsum(charLen_per_Mmorpheme)
        StartChar_per_Mmorpheme<-EndChar_per_Mmorpheme-charLen_per_Mmorpheme+1
      charLen_per_Jmorpheme<-net_J_Res[, 1]%>%nchar
        EndChar_per_Jmorpheme<-cumsum(charLen_per_Jmorpheme)
        StartChar_per_Jmorpheme<-EndChar_per_Jmorpheme-charLen_per_Jmorpheme+1
      if(nrow_J!=0){
        for(i in 1:nrow_J){
          current_J_start_pos<-StartChar_per_Jmorpheme[J_wait2project_sn[i]]
          current_J_end_pos<-EndChar_per_Jmorpheme[J_wait2project_sn[i]]
          if(any(StartChar_per_Mmorpheme==current_J_start_pos)){
            # ■■■■■ J    ■■■■■ J    ■■■■■  J
            # ■■■■■ M 或 ■■■■  M 或 ■■■■■■ M
            temp_matched<-which(StartChar_per_Mmorpheme==current_J_start_pos)
            if(EndChar_per_Mmorpheme[temp_matched]>=current_J_end_pos){
              # ■■■■■ J    ■■■■■  J
              # ■■■■■ M 或 ■■■■■■ M
              res2compact[[1]]<-c(res2compact[[1]], temp_matched)#把映射终点词素的行编号追加到res2compact的第1要素中。
              res2compact[[2]]<-rbind(res2compact[[2]], c("助動詞", paste("助動詞", HIT_J$基本形[i], sep="_"), paste("助動詞", HIT_J$活用形种类[i], sep="_")))
              cat(i, "初词素相同，J或短。\n")
            }else{
              # ■■■■■ J
              # ■■■■  M
              res2compact[[1]]<-c(res2compact[[1]], temp_matched+1)
              res2compact[[2]]<-rbind(res2compact[[2]], c("助動詞", paste("助動詞", HIT_J$基本形[i], sep="_"), paste("助動詞", HIT_J$活用形种类[i], sep="_")))
              cat(i, "初词素相同，J长。\n")
            }
          }else{
            if(any(EndChar_per_Mmorpheme==current_J_end_pos)){
              # ■■■■■ J     ■■■ J
              #  ■■■■ M 或 ■■■■ M
              temp_matched<-which(EndChar_per_Mmorpheme==current_J_end_pos)
              res2compact[[1]]<-c(res2compact[[1]], temp_matched)
              res2compact[[2]]<-rbind(res2compact[[2]], c("助動詞", paste("助動詞", HIT_J$基本形[i], sep="_"), paste("助動詞", HIT_J$活用形种类[i], sep="_")))
              cat(i, "末词素相同。\n")
            }else{
              if(any(current_J_start_pos < StartChar_per_Mmorpheme & current_J_end_pos > EndChar_per_Mmorpheme)){
                # ■■■■■ J
                #  ■■■  M
                temp_matched<-which(current_J_start_pos < StartChar_per_Mmorpheme & current_J_end_pos >EndChar_per_Mmorpheme)
                len_temp_matched<-length(temp_matched)
                res2compact[[1]]<-c(res2compact[[1]], temp_matched[len_temp_matched]+1)
                res2compact[[2]]<-rbind(res2compact[[2]], c("助動詞", paste("助動詞", HIT_J$基本形[i], sep="_"), paste("助動詞", HIT_J$活用形种类[i], sep="_")))
                cat(i, "J含M。\n") 
              }else{
                #  ■■■  J
                # ■■■■■ M
                temp_matched<-which(current_J_start_pos > StartChar_per_Mmorpheme & current_J_end_pos <EndChar_per_Mmorpheme)
                res2compact[[1]]<-c(res2compact[[1]], temp_matched)
                res2compact[[2]]<-rbind(res2compact[[2]], c("助動詞", paste("助動詞", HIT_J$基本形[i], sep="_"), paste("助動詞", HIT_J$活用形种类[i], sep="_")))
                cat(i, "M含J。\n")
              }
            }
          }
        }
      }
    }# 用字符的位置来完成投影。
    if(!is.null(HIT_M$行编号)){
      res2compact[[1]]<-c(res2compact[[1]], HIT_M$"行编号")
    }
    if(nrow_M!=0){
      transformed_HIT_M<-as.matrix(data.frame(浅层标签="助動詞",
                                              中层标签=paste("助動詞", HIT_M$"基本形", sep="_"),
                                              深层标签=paste("助動詞", HIT_M$"活用形种类", sep="_")))
      res2compact[[2]]<-rbind(res2compact[[2]], transformed_HIT_M)
    }
    res2compact[[2]]<-res2compact[[2]][order(res2compact[[1]]), ]
    res2compact[[1]]<-sort(res2compact[[1]])
    if(length(unique(res2compact[[1]]))!=length(res2compact[[1]])){
      sn<-res2compact[[1]]
      含序列号数<-length(res2compact[[1]])
      通し番号<-1:含序列号数
      temp<-rle(sn)
      repeated_twice<-temp$values[which(temp$lengths==2)]
      for(z in repeated_twice){
        previous<-which(sn==z)[1]
        if(res2compact[[2]][previous, 2]!=res2compact[[2]][previous+1, 2]){
          sn[previous]<-sn[previous]-1
        }else{
          sn[previous]<-0
        }
      } # 如存在重复2次的编号，若对应助动词基本型不同的话，将前1个编号减1；若对应助动词基本型相同，将前一个变0
      if(any(sn[-1]-sn[-含序列号数]==1)){
        adjacent_previous<-which(sn[-1]-sn[-含序列号数]==1)
        for(z in adjacent_previous){
          if(res2compact[[2]][z, 2]==res2compact[[2]][z+1, 2]){
            sn[z]<-0
          }
        }
      } # 若存在相邻的1组编号，若对应的助动词基本型相同的话，将前1个编号改为0
      if(any(sn==0)){
        res2compact[[2]]<-res2compact[[2]][which(sn!=0),]
        res2compact[[1]]<-sn[-which(sn==0)]
      }
    }
    return(res2compact)
    #至此，该函数（fun_Matching_Auxiliary_Verb_compact）的最终输出已编辑完成。
    #具体形式为list对象，含2个元素。
    #元素1向量对象，其内容为M_Res中被判定为“助动词”的词素的行编号；
    #元素2为data.frame对象，内容被判定为“助动词”的词素的，浅、中、深3层标签。
    #余下的所以代码可统统删除。
  }
}
