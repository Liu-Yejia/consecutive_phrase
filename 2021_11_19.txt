fun_fuse_to_frequencies<-function(x, m){
  # x为1list对象，内含n条向量。（假想应用场景：n为作品数）
  n<-length(x)
  zxl<-NULL # 总向量
  for(i in 1:n){
    zxl<-c(zxl, x[[i]][[m]])
  }
  zxl<-unique(zxl)
  result_matrix<-matrix(0, n, length(zxl))
  colnames(result_matrix)<-zxl
  for(i in 1:n){
    tab<-table(x[[i]][[m]])
    result_matrix[i, which(zxl%in%names(tab))]<-tab
  }
  return(result_matrix)
}


fun_fragment_formation<-function(material, n=1){
  # material 为某句话对应的3阶矩阵，n 为自目标词素（助詞/記号）向前夺取的词素数，默认为1。
  target_pos<-which(str_detect(material[, 1], “[、。\u3040-\u309F]”)) # 该句中“助词”与“记号”的行编号。
  len_target_pos<-target_pos%>%length # the length of target_pos.
  if(len_target_pos==0){
    return(NULL)
  }else{
    target_pos_first_morphemes<-target_pos-n
    res_matrix<-matrix(“”, len_target_pos, 3)
    for(i in 1:len_target_pos){
      res_matrix[i,]<-material[target_pos_first_morphemes[i]:target_pos[i], ]%>%fun_glue(2, “-+-”)
    }
  }
  #if(len_target!=1){
  # res_matrix<-res_matrix%>%fun_glue(2, “==+==“)
  #}
  return(res_matrix)
}

fun_chain<-function(X){
  a<-(1:nrow(X))%>%combn(2)%>%t
  v_1<-character()
  v_2<-character()
  v_3<-character()
  V<-data.frame(v_1, v_2, v_3)
  for(i in 1:nrow(a)){
    V[i,]<-X[a[i,],]%>%fun_glue(2, “”)
  }
  return(V)
}

matched<-which(material[, 1]==“。”)
b<-c(0, head(matched, -1))+1
sentences_G3<-list()
for(i in 1:len(n)){
  sentences_G3[[i]]<-X[b[i]:matched[i],]
}


