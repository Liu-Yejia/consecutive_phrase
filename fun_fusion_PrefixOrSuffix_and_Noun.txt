fun_fusion_PrefixOrSuffix_and_Noun<-function(x, mode="M", target="Pre"){
  #----
  fun_Trivial_Prefix<-function(x, y){
    library(stringr)
    #本函数用来适切地将“接头辞”行和后接的“名词”行合并为1行
    #输入x,y为两条长度均为含15个元素的向量,且为处理后的Juman++形态素解析结果
    #输入x,y为两条长度均为含16个元素的向量,且为处理后的Juman++形态素解析结果（更新于R3/3/10）
    #x为“接头辞”行，y为后接的“名词”行
    Ore<-rbind(x, y)#rbind后的待处理矩阵（2行15列）
    Res<-rep("", 15)#最终输出的结果
    Simple_Combine<-c(1:3, 14, 15)#简单结合
    Keep_the_Latter<-c(4:11)#仅保留后者
    Padding_Combine<-13#中间插入自定义分隔符后结合
    Res[Simple_Combine]<-fun_glue(Ore[,Simple_Combine], direction=2, sep="")
    Res[Keep_the_Latter]<-Ore[2,Keep_the_Latter]
    Res[Padding_Combine]<-fun_glue(Ore[,Padding_Combine], direction=2, sep=" =|= ")%>%str_replace(" =\\|= $", "")
    #for Tricky One: 12
    if(1){
      Chinese_Characters<-Ore[,12]%>%str_extract_all(":.*/")%>%unlist()%>%str_sub(2,-2)%>%fun_InVec_adhere("")
      Hiragana<-Ore[,12]%>%str_extract_all("/.*$")%>%unlist()%>%str_sub(2,-1)%>%fun_InVec_adhere("")
      Res[12]<-c("代表表記:", Chinese_Characters, "/", Hiragana)%>%fun_InVec_adhere("")
    }
    return(Res)
  }
  fun_Trivial_Suffix<-function(x, y){
    library(stringr)
    #本函数用来适切地将“名词”行和后接的“接尾词”行合并为1行
    #输入x,y为两条长度均为含15个元素的向量,且为处理后的Juman++形态素解析结果
    #x为“名词”行，y为后接的“接尾词”行
    Ore<-rbind(x, y)#rbind后的待处理矩阵（2行16列）
    Res<-rep("", 16)#最终输出的结果
    Simple_Combine<-c(1:3, 14, 15)#简单结合
    Keep_the_Latter<-c(4:11)#仅保留前者
    Padding_Combine<-13#中间插入自定义分隔符后结合
    Res[Simple_Combine]<-fun_glue(Ore[,Simple_Combine], direction=2, sep="")
    Res[Keep_the_Latter]<-Ore[1,Keep_the_Latter]
    Res[Padding_Combine]<-Ore[,Padding_Combine]%>%fun_glue(direction=2, sep=" =|= ")%>%str_replace(" =\\|= $", "")
    #for Tricky One: 12
    if(1){
      Chinese_Characters<-Ore[,12]%>%str_extract_all(":.*/")%>%unlist()%>%str_sub(2,-2)%>%fun_InVec_adhere("")
      Hiragana<-Ore[,12]%>%str_extract_all("/.*$")%>%unlist()%>%str_sub(2,-1)%>%fun_InVec_adhere("")
      #Res[12]<-fun_InVec_adhere(vec=c("代表表記:", Chinese_Characters, "/", Hiragana), sep="")
      Res[12]<-c("代表表記:", Chinese_Characters, "/", Hiragana)%>%fun_InVec_adhere("")
    }
    return(Res)
  }
  #----
  #x是已经过名词合并的MeCab或Juman++的形态素解析结果；参数mode用来指定输入的形态素结果是来自MeCab或是Juman++。
  #参数target用来指定和“名词”行合并的是“接头辞”还是“接尾辞”（前者为"Pre"，后者为"Suf"）
  if(target=="Pre"){
    if(mode=="M"){
      a<-which(x[,2]=="接頭詞")#被判定为“接头辞”的形态素的序列号
      Prefix_lines<-a[which(x[a+1,2]=="名詞")]#“接头辞”形态素中，后接“名词”形态素的序列号
      Noun_lines<-Prefix_lines+1
      len<-length(Prefix_lines)#匹配成功的个数
      if(len!=0){
        for(i in 1:len){
          Current_PrefixLine<-x[Prefix_lines[i],]#现在的“接头辞”行
          Current_NounLine<-x[Noun_lines[i],]#现在的“名词”行
          Fused<-paste0(Current_PrefixLine, Current_NounLine)#把“接头辞”行与后续的“名词”行的对应元素粘起来
          Fused[c(2,3)]<-Current_NounLine[c(2,3)]#将其中第2元素（品词大分类），第3元素（品词小分类）替换为“名词”行的对应元素
          x[Noun_lines[i],]<-Fused
        }
        new_x<-x[-Prefix_lines,]
      }else{
        new_x<-x
      }
    }else 
      if(mode=="J"){
        b<-which(x[,4]=="接頭辞")
        Prefix_lines<-b[which(x[b+1,4]=="名詞")]
        Noun_lines<-Prefix_lines+1
        len<-length(Prefix_lines)
        if(len!=0){
          for(i in 1:len){
            Current_PrefixLine<-x[Prefix_lines[i],]
            Current_NounLine<-x[Noun_lines[i],]
            Fused<-fun_Trivial_Prefix(Current_PrefixLine, Current_NounLine)
            x[Noun_lines[i],]<-Fused
          }
          new_x<-x[-Prefix_lines,]
        }else{
          new_x<-x
        }
      }else{
        cat("mode只能为M或J。\n")
      }
    return(new_x)
  }
  if(target=="Suf"){
    if(mode=="J"){
      b<-which(x[,4]=="接尾辞")
      Suffix_lines<-b[which(x[b-1,4]=="名詞")]
      Noun_lines<-Suffix_lines-1
      len<-length(Suffix_lines)
      if(len!=0){
        for(i in 1:len){
          Current_NounLine<-x[Noun_lines[i],]
          Current_SuffixLine<-x[Suffix_lines[i],]
          Fused<-fun_Trivial_Suffix(Current_NounLine, Current_SuffixLine)
          x[Noun_lines[i],]<-Fused
        }
        new_x<-x[-Suffix_lines,]
      }else{
        new_x<-x
      }
    }else{
      cat("在target为“Suf”的情况下，mode只能为J。\n")
    }
    return(new_x)
  }
}
