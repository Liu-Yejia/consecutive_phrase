new_bunsetsu_patterns_1019<-function(string)#活用形情報入り文節パターンを求める関数
{
  fun_attract<-function(a, b, hanyi=1){
    if(0){a<-the_remainder;b<-AV_series_numbers;hanyi<-1}
    # 寻找不属于a的b中的元素，记下这些元素在b中的坐标。
    only_in_b<-setdiff(b, a)
    len_only_in_b<-length(only_in_b)
    if(len_only_in_b>=1){
      only_in_b_pos<-rep(0, len_only_in_b)
      for(i in 1:len_only_in_b){
        a_trapped_ones<-a[which(abs(a-only_in_b[i])<=hanyi)]
        len_a_trapped_ones<-length(a_trapped_ones)
        if(len_a_trapped_ones==0){
          break
        }else{
          b[which(only_in_b[i]==b)]<-a_trapped_ones[1]
        }
      }
    }
    return(b)
  }# 「吸い寄せ」させてズレを解消する。
  ##准备M_Res
  if(1){
    rough_res<-Analytic_MeCab_429(string)
    net_M_Res<-rough_res$Final_Result
    string<-rough_res$input
    net_M_Res_with_underbar<-net_M_Res[, 1]
    net_M_Res[, 1]<-net_M_Res[, 1]%>%str_replace_all("_", "")#准备两个net_M_Res: net_M_Res与net_M_Res_with_underbar, 二者区别在于其第1列内元素是否为带“_”的聚合词素（fusion morphemes）
    nr_net_M_Res<-ifelse(!is.null(nrow(net_M_Res)), nrow(net_M_Res), 1)#net_M_Res的长度（单位为行）
    rear_padding_M<-matrix("", 3, 10); M_Res<-rbind(net_M_Res, rear_padding_M)#后方padding
    FINAL<-matrix("", nr_net_M_Res, 3); colnames(FINAL)<-c("浅层标签", "中层标签", "深层标签")##为最终结果准备矩阵FINAL
  }
  if(!is.null(nrow(net_M_Res))){
    if(any(net_M_Res[, 2]=="記号")){
      marks_sn<-which(net_M_Res[, 2]=="記号")
      FINAL[marks_sn, ]<-net_M_Res[marks_sn, 1]
    }#对于标点符号词素，将其词素形式直接填入三阶粒度矩阵
    if(any(net_M_Res[, 2]=="助詞")){
      postpositions_sn<-which(net_M_Res[, 2]=="助詞")
      FINAL[postpositions_sn, ]<-net_M_Res[postpositions_sn, 1]
    }#对于助词词素，进行同样的处理
    if(any(net_M_Res[, 2]=="動詞")){
      Res_V<-fun_find_verbs_C_V_CVS_MeCab(material=net_M_Res)#检索net适配MeCab词素解析结果
      V_series_numbers<-Res_V$"匹配序列号"
      V_3level_granularities<-Res_V$"三阶粒度"
      FINAL[V_series_numbers, ]<-as.matrix(V_3level_granularities)
    }#对于动词词素，准备行编号和三阶粒度矩阵，每1阶粒度对应1列
    if(any(net_M_Res[, 2]=="形容詞")){
      Res_A<-fun_Adjective_Conjugation_51(M_Res)
      A_series_numbers<-Res_A$"トータルナンバー"
      if(length(A_series_numbers)>=2){
        A_3level_granularities<-data.frame(表层标签="形容詞", 中层标签=paste("形容詞", Res_A$"活用形矩阵"[, 2], sep="_"), 深层标签=fun_glue(Res_A$"活用形矩阵", sep="_"))
      }else{
        A_3level_granularities<-data.frame(表层标签="形容詞", 中层标签=paste("形容詞", Res_A$"活用形矩阵"[2], sep="_"), 深层标签=fun_glue(Res_A$"活用形矩阵", sep="_"))
      }
      FINAL[A_series_numbers, ]<-as.matrix(A_3level_granularities)
    }#对于形容词词素，准备行编号和三阶粒度矩阵，每1阶粒度对应1列
    if(any(net_M_Res[, 2]=="名詞")){
      sn_num<-which(net_M_Res[, 2]=="名詞")
      sn_special_num<-which(net_M_Res[, 2]=="名詞*")
      FINAL[sn_num, ]<-"名詞"
      FINAL[sn_special_num, 1]<-"名詞"
      FINAL[sn_special_num[which(net_M_Res[sn_special_num, 3]=="代名詞")], 2]<-"代名詞"
      FINAL[sn_special_num[which(net_M_Res[sn_special_num, 3]=="非自立")], 2]<-"形式名詞"
      FINAL[sn_special_num, 3]<-paste0(FINAL[sn_special_num, 2], "_", net_M_Res[sn_special_num, 1])
    }#对于名词词素，准备行编号和三阶粒度矩阵，自左至右分别为："名詞"、"名詞"／"形式名詞"、"名詞"／具体的な形式名詞
    if(any(net_M_Res[, 2]=="形容動詞")){
      temp<-which(net_M_Res[, 2]=="形容動詞")
      true_kyds<-temp[which(str_detect(net_M_Res[temp+1, 1], "に|な|で|だ|なら"))]
      FINAL[true_kyds, ]<-"形容動詞"
      FINAL[setdiff(temp, true_kyds), ]<-"名詞"
    }#对于形容动词，不进行细化处理。
    if(any(net_M_Res[, 2]=="副詞")){
      temp<-which(net_M_Res[, 2]=="副詞")
      FINAL[temp, ]<-"副詞"
      FINAL[temp, 3]<-net_M_Res[temp, 1]
    }#对于副词，设两阶粒度，前2列均为“副詞”，末列为原型。
    if(any(net_M_Res[, 2]=="連体詞")){
      temp<-which(net_M_Res[, 2]=="連体詞")
      FINAL[temp, ]<-"連体詞"
      FINAL[temp, 3]<-net_M_Res[temp, 1]
    }#对于连体词，设两阶粒度，前2列均为“連体詞”，末列为原型。
    if(any(net_M_Res[, 2]=="接続詞")){
      temp<-which(net_M_Res[, 2]=="接続詞")
      FINAL[temp, ]<-"接続詞"
      FINAL[temp, 3]<-net_M_Res[temp, 1]
    }#对于接续词，设两阶粒度，前2列均为“接続詞”，末列为原型。
    if(1){
      if(any(net_M_Res[, 6]=="特殊・タ")){
        TaDa_sn<-which(net_M_Res[, 6]=="特殊・タ")
        FINAL[TaDa_sn, 1]<-"助動詞";FINAL[TaDa_sn, 2]<-"助動詞_た/だ"
        FINAL[TaDa_sn[which(net_M_Res[TaDa_sn, 7]=="未然形")], 3]<-"助動詞_た/だ_未然形"
        FINAL[TaDa_sn[which(net_M_Res[TaDa_sn, 7]=="仮定形")], 3]<-"助動詞_た/だ_仮定形"
        temp<-TaDa_sn[which(net_M_Res[TaDa_sn, 7]=="基本形")]
        end<-temp[which(str_detect(net_M_Res[temp+1, 2], "(助詞|記号)"))]
        attributive<-setdiff(temp, end)
        FINAL[end, 3]<-"助動詞_た/だ_終止形"
        FINAL[attributive, 3]<-"助動詞_た/だ_連体形"
      }#对于助动词“た/だ”，由于其处理确实太棘手了，故将其拎出来单独处理。
      if(any(net_M_Res[, 6]=="特殊・ナイ")){
        Nai_sn<-which(net_M_Res[, 6]=="特殊・ナイ")
        FINAL[Nai_sn, 1]<-"助動詞";FINAL[Nai_sn, 2]<-"助動詞_ない"
        FINAL[Nai_sn[which(net_M_Res[Nai_sn, 7]=="未然形")], 3]<-"助動詞_ない_未然形"
        FINAL[Nai_sn[which(net_M_Res[Nai_sn, 7]=="仮定形")], 3]<-"助動詞_ない_仮定形"
        FINAL[Nai_sn[which(str_detect(net_M_Res[Nai_sn, 7], "連用"))], 3]<-"助動詞_ない_連用形"
        temp<-Nai_sn[which(net_M_Res[Nai_sn, 7]=="基本形")]
        end<-temp[which(str_detect(net_M_Res[temp+1, 2], "(助詞|記号)"))]
        attributive<-setdiff(temp, end)
        FINAL[end, 3]<-"助動詞_ない_終止形"
        FINAL[attributive, 3]<-"助動詞_ない_連体形"
      }#对于助动词“ない”，基于相同的理由，拎出来单独处理。
      if(any(net_M_Res[, 2]=="動詞" & net_M_Res[, 3]=="接尾" & str_detect(net_M_Res[, 8], "(れる|られる)"))){
        ReRu_sn<-which(net_M_Res[, 2]=="動詞" & net_M_Res[, 3]=="接尾" & str_detect(net_M_Res[, 8], "(れる|られる)"))
        FINAL[ReRu_sn, 1]<-"助動詞"; FINAL[ReRu_sn, 2]<-"助動詞_れる/られる"
        FINAL[ReRu_sn[which(net_M_Res[ReRu_sn, 7]=="未然形")], 3]<-"助動詞_れる/られる_未然形"
        FINAL[ReRu_sn[which(net_M_Res[ReRu_sn, 7]=="仮定形")], 3]<-"助動詞_れる/られる_仮定形"
        FINAL[ReRu_sn[which(net_M_Res[ReRu_sn, 7]=="連用形")], 3]<-"助動詞_れる/られる_連用形"
        FINAL[ReRu_sn[which(str_detect(net_M_Res[ReRu_sn, 7], "命令"))], 3]<-"助動詞_れる/られる_命令形"
        temp<-ReRu_sn[which(net_M_Res[ReRu_sn, 7]=="基本形")]
        end<-temp[which(str_detect(net_M_Res[temp+1, 2], "(助詞|記号)"))]
        attributive<-setdiff(temp, end)
        FINAL[end, 3]<-"助動詞_れる/られる_終止形"
        FINAL[attributive, 3]<-"助動詞_れる/られる_連体形"
      }#对于助动词“れる”，基于相同的理由，拎出来单独处理。
      if(any(net_M_Res[, 2]=="動詞" & net_M_Res[, 3]=="接尾" & net_M_Res[, 8]=="せる")){
        SeRu_sn<-which(net_M_Res[, 2]=="動詞" & net_M_Res[, 3]=="接尾" & net_M_Res[, 8]=="せる")
        FINAL[SeRu_sn, 1]<-"助動詞"; FINAL[SeRu_sn, 2]<-"助動詞_せる"
        FINAL[SeRu_sn[which(net_M_Res[SeRu_sn, 7]=="未然形")], 3]<-"助動詞_せる_未然形"
        FINAL[SeRu_sn[which(net_M_Res[SeRu_sn, 7]=="仮定形")], 3]<-"助動詞_せる_仮定形"
        FINAL[SeRu_sn[which(net_M_Res[SeRu_sn, 7]=="連用形")], 3]<-"助動詞_せる_連用形"
        FINAL[SeRu_sn[which(str_detect(net_M_Res[SeRu_sn, 7], "命令"))], 3]<-"助動詞_せる_命令形"
        temp<-SeRu_sn[which(net_M_Res[SeRu_sn, 7]=="基本形")]
        end<-temp[which(str_detect(net_M_Res[temp+1, 2], "(助詞|記号)"))]
        attributive<-setdiff(temp, end)
        FINAL[end, 3]<-"助動詞_せる_終止形"
        FINAL[attributive, 3]<-"助動詞_せる_連体形"
      }#对于助动词“せる”，基于相同的理由，拎出来单独处理。
    }#一些很难映射的助动词
    the_remainder<-which(FINAL[, 1]=="")#剩下的行编号
    if(length(the_remainder)!=0){
      #对于助动词词素，准备行编号和三阶粒度矩阵，每1阶粒度对应1列
      Res_AV<-fun_MAV_for_Text(string)
      AV_series_numbers<-Res_AV[[1]]
      Details<-Res_AV[[2]]
      #组合<-data.frame(通し番号=AV_series_numbers, Details); nrow(组合)
      if(length(AV_series_numbers)!=0){
        if(length(union(the_remainder, AV_series_numbers))>max(length(the_remainder), length(AV_series_numbers))){ # 如果2者元素存在ズレ的话
          (new_AV_series_numbers<-fun_attract(a=the_remainder, b=AV_series_numbers, hanyi=1))
        }
        if(any(AV_series_numbers==0)){
          zero_rn<-which(AV_series_numbers==0)
          AV_series_numbers<-AV_series_numbers[-zero_rn]
          Details<-Details[-zero_rn, ]
        }
        FINAL[AV_series_numbers, ]<-as.matrix(Details)
      }
    }
  }else{
    stop("Error: input is too short!")
  }
  #收尾工作
  if(1){
    unprocessed<-which(FINAL[, 1]=="")
    if(length(unprocessed)>1){
      FINAL[unprocessed, 1]<-net_M_Res[unprocessed, 2]
      FINAL[unprocessed, 2]<-net_M_Res[unprocessed, 2]
      FINAL[unprocessed, 3]<-net_M_Res[unprocessed, 2]
    }
    # 至此，三阶矩阵（初级）填充完成。
    len_per_fm<-rep(0, nr_net_M_Res) # 记录每一个聚合态词素的长度（单位为元词素）
    Original_Morpheme_Chain<-NULL
    for(i in 1:nr_net_M_Res){
      temp<-net_M_Res_with_underbar[i]%>%str_split("_")%>%unlist
      len_per_fm[i]<-temp%>%length # 各聚合态词素长度
      Original_Morpheme_Chain<-c(Original_Morpheme_Chain, temp) # 元词素链
    }
    END_pos<-cumsum(len_per_fm)
    START_pos<-END_pos-len_per_fm+1
    GREAT_FINAL<-data.frame(MeCab_Based_Morpheme=net_M_Res[, 1],
                            MeCab_Based_Morpheme_with_Bar=net_M_Res_with_underbar,
                            FINAL,
                            START_pos=START_pos,
                            END_pos=END_pos)
    true_FINAL<-NULL
    for(i in 1:nr_net_M_Res){
      if(len_per_fm[i]>1){
        true_FINAL<-rbind(true_FINAL, twice(FINAL[i,], len_per_fm[i]))
      }else{
        true_FINAL<-rbind(true_FINAL, FINAL[i,])
      }
    }
    rownames(true_FINAL)<-Original_Morpheme_Chain
  }
  #输出
  if(1){
    list(true_FINAL=true_FINAL, # 3列矩阵，每1列对应1阶粒度，自左至右粒度变细；行数为元词素个数
         GREAT_FINAL=GREAT_FINAL) # 7列矩阵，行数为原始词素个数，第1列为聚合态词素（不带短下划线），第2列为聚合态词素（带短下划线）；第3-5列为各聚合态词素的三阶粒度矩阵；第6-7列为各
  }
}
